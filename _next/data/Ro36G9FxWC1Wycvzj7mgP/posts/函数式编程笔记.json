{"pageProps":{"postData":{"id":"函数式编程笔记","title":"函数式编程笔记","date":"20210612155010","content":"# functional-programming\n\n\n\n## 01.纯函数(Purity)\n\n### 1.纯函数的定义\n\n输出仅由输入决定，且不产生副作用。\n\n```javascript\nconst greet = (name) => `hello, ${name}`\ngreet('world')\n```\n\n以下代码不是纯函数：\n\n```javascript\nwindow.name = 'Brianne'\n\nconst greet = () => `Hi, ${window.name}`\n\ngreet() // \"Hi, Brianne\"\n```\n\n以上示例中，函数依赖外部状态。\n\n```javascript\nlet greeting\n\nconst greet = (name) => {\n    greeting = `Hi, ${name}`\n}\n\ngreet('Brianne')\ngreeting // \"Hi, Brianne\"\n```\n\n以上实例中，函数修改了外部状态。\n\n**纯函数的几个特性**:\n\n- 无**副作用(Side effects)**\n- 可缓存性 (Cacheable)\n- 可移植性,自文档化（Portable / Self-Documenting）\n- 可测试性（Testable）\n- 合理性,引用透明性（Reasonable）\n- 并行运算\n\n### 2.特性1:无副作用(Side effects)\n\n如果函数与外部可变状态进行交互，则它是有副作用的。\n\n副作用可能包含，但不限于：\n\n- 更改文件系统\n- 往数据库插入记录\n- 发送一个 http 请求\n- 可变数据\n- 打印/log\n- 获取用户输入\n- DOM 查询\n- 访问系统状态\n- ...\n\n```javascript\nconst differentEveryTime = new Date()//可变日期函数是副作用\nconsole.log('IO is a side effect!')//log函数也是副作用\n```\n\n### 3.特性2:可缓存性 (Cacheable)\n\n由于纯函数的输入就决定了输出,就和数学中的函数一样(所以我们也可以像数学公式一样推导),一个确定的输入对应一个确定的输出,\n\n因此我们可以根据传入的参数把结果缓存起来,这样后续以同样的参数调用的时候就可以直接返回结果,而不是重新执行一遍算法.\n\n\n\n实现缓存的一种典型方式是memoize技术,\n\n下面的代码是一个粗略的实现,\t传入纯函数作为参数,就能返回一个带缓存的纯函数.\n\n```javascript\nvar memoize = function(f) {\n  var cache = {};\n\n  return function() {\n    var arg_str = JSON.stringify(arguments);\n    cache[arg_str] = cache[arg_str] || f.apply(f, arguments);\n    return cache[arg_str];\n  };\n};\n```\n\n\n\n下面是我参考lodash的代码用typescript写的memoize函数，\n\nlodash的代码里面用给函数加cache属性的方式，但是在typescript里面函数是不能用`.`语法随便添加属性的。\n\n所以我实现的版本没办法查看缓存究竟有多少\n\n```typescript\n/**\n *\n * 传入一个函数,返回它的带缓存版本,\n * 缺点是缓存在闭包里面没办法获取,也没办法消除.\n * 第二个参数resolver是用来产生缓存的key的函数,如果你不提供这个函数,将会用函数的第一个参数作为key\n * @param func 需要缓存的函数\n * @param resolver 生成缓存key的映射的函数\n */\nfunction memoize(\n  func: (...args: any) => any,\n  resolver?: (...args: any) => any\n): (...args: any) => any {\n  // func 和 resolve需要都是函数类型\n  if (\n    typeof func !== 'function' ||\n    (resolver != null && typeof resolver !== 'function')\n  ) {\n    throw new TypeError('Expected a function')\n  }\n  const cache = new Map()\n  const memoized = function (...args: any): any {\n    const key = resolver ? resolver(args) : args[0]\n    if (cache.has(key)) {\n      return cache.get(key)\n    }\n    const result = func(args)\n    cache.set(key, result)\n    return result\n  }\n  return memoized\n}\nexport default memoize\n```\n\n下面是编译成es2015的代码，基本上除了没有类型也没什么变化了。\n\n```javascript\n/**\n *\n * 传入一个函数,返回它的带缓存版本,\n * 缺点是缓存在闭包里面没办法获取,也没办法消除.\n * 第二个参数resolver是用来产生缓存的key的函数,如果你不提供这个函数,将会用函数的第一个参数作为key\n * @param func 需要缓存的函数\n * @param resolver 生成缓存key的映射的函数\n */\nfunction memoize(func, resolver) {\n    // func 和 resolve需要都是函数类型\n    if (typeof func !== 'function' ||\n        (resolver != null && typeof resolver !== 'function')) {\n        throw new TypeError('Expected a function');\n    }\n    var cache = new Map();\n    var memoized = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var key = resolver ? resolver(args) : args[0];\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        var result = func(args);\n        cache.set(key, result);\n        return result;\n    };\n    return memoized;\n}\n```\n\n### 4.特性3：可移植性,自文档化（Portable / Self-Documenting）\n\n纯函数的依赖很明确，因此更易于观察和理解\n\n因为他们与环境无关，所以可以拷贝到任何地方运行，提高了代码的复用性。\n\n对比面向对象，你从类中拷贝一个方法，就要麻烦得多。\n\n### 5.特性4：可测试性（Testable）\n\n纯函数让测试更加容易。\n\n只需要给定输入，断言输出就可以了。\n\n甚至有专门的测试工具帮我们自动生成输入，并断言输出。\n\n比如**Quickcheck**\n\n### 6.特性5：引用透明性(referential transparency)，合理性（Reasonable）\n\n一个表达式能够被它的值替代而不改变程序的行为称为引用透明。\n\n```typescript\nconst greet = () => 'hello, world.'\n```\n\n引用透明有利于我们使用一种 “等式推导”（equational reasoning）的技术来分析代码，\n\n\n\n### 7.特性6：可以并行运行\n\n我们可以并行运行任意纯函数。因为纯函数根本不需要访问共享的内存，而且根据其定义，纯函数也不会因副作用而进入竞争态（race condition）。\n\njs毕竟是个单线程的语言，在其他多线程的语言里面这个作用就比较明显了，比如golang，比如julia，利用纯函数的特性并行计算，可以充分利用计算机的性能。\n\n## 02.柯里化(Currying)\n\n**柯里化**  将一个多元函数转变为一元函数的过程。 每当函数被调用时，它仅仅接收一个参数并且返回带有一个参数的函数，直到传递完所有的参数。\n\n下面是例子\n\n```javascript\nconst sum = (a, b) => a + b\n\nconst curriedSum = (a) => (b) => a + b\n\ncurriedSum(3)(4)         // 7\n\nconst add2 = curriedSum(2)\n\nadd2(10)     // \n```\n\n当我们编写柯里化相关的函数的时候，通常会把内存占用大的参数放在列表的后面，比如map，第一个参数是函数，第二个才是数值，这样柯里化之后，可以再最后传入数值，减少性能浪费，也更符合充分利用函数作为一等公民的便利性。\n\n下面我们从介绍柯里化相关的术语开始\n\n### 1.Arity 函数参数的个数\n\n函数参数的个数。来自于单词 unary, binary, ternary 等等。这个单词是由 -ary 与 -ity 两个后缀拼接而成。例如，一个带有两个参数的函数被称为二元函数或者它的 arity 是2。它也被那些更喜欢希腊词根而非拉丁词根的人称为 `dyadic`。同样地，带有可变数量参数的函数被称为 `variadic`，而二元函数只能带两个参数。\n\n```javascript\nconst sum = (a, b) => a + b\n\nconst arity = sum.length\nconsole.log(arity)        // 2\n```\n\n在JavaScript的api里面，函数的参数个数可以通过函数的`length`属性来获取。\n\n如何定义一个任意个参数的函数,我们可以用到es6的语法，下面`...arg`就表示任意个参数\n\n获取的时候，args相当于数组，`...`是数组解构的语法，另外我们在函数的内部的时候，作用域里面有一个argument参数，用过这个也可以获取到函数的参数和参数个数。\n\n```javascript\nfunction(...args){\n args.forEach(()=>{\n     \n })   \n}\n```\n\n### 2.高阶函数 (Higher-Order Function / HOF)\n\n以函数为参数或返回值。\n\n柯里化函数算是典型的高阶函数\n\n```javascript\nconst filter = (predicate, xs) => xs.filter(predicate)\n\nconst is = (type) => (x) => Object(x) instanceof type\n\nfilter(is(Number), [0, '1', 2, null]) // 0, 2\n```\n\n### 3.偏函数 (Partial Function)\n\n对原始函数预设参数作为一个新的函数。\n\n当我们柯里化函数之后，部分传参后返回的函数也就是偏函数。\n\n```JavaScript\n// 创建偏函数，固定一些参数\nconst partical = (f, ...args) =>\n  // 返回一个带有剩余参数的函数\n  (...moreArgs) =>\n    // 调用原始函数\n    f(...args, ...moreArgs)\n\nconst add3 = (a, b, c) => a + b + c\n\n// (...args) => add3(2, 3, ...args)\n// (c) => 2 + 3 + c\nconst fivePlus = partical(add3, 2, 3)\n\nfivePlus(4)  // 9\n```\n\n也可以使用 `Function.prototype.bind` 实现偏函数。\n\n```javascript\nconst add1More = add3.bind(null, 2, 3)\n```\n\n偏函数应用通过对复杂的函数填充一部分数据来构成一个简单的函数。柯里化通过偏函数实现。\n\n### 4.自动柯里化 (Auto Currying)\n\n`lodash`，`understore` 和 `ramda` 有 `curry` 函数可以自动完成柯里化。\n\n```javascript\nconst add = (x, y) => x + y\n\nconst curriedAdd = _.curry(add)\n\ncurriedAdd(1, 2)   // 3\ncurriedAdd(1)(2)   // 3\ncurriedAdd(1)      // (y) => 1 + y\n```\n\n#### typescript 实现两个参数函数的柯里化\n\n```typescript\n/**\n * 对有两个参数的函数进行柯里化\n * @param func 有两个参数的函数\n * @returns 柯里化后的函数\n */\nfunction curry2(func: (x: any, y: any) => any) {\n  return function f2(a?: any, b?: any) {\n    switch (arguments.length) {\n      case 0:\n        return f2\n      case 1:\n        return (_b: any): any => {\n          return func(a, _b)\n        }\n      case 2:\n        return func(a, b)\n      default:\n        throw new Error(\n          'curry2 arity must be a non-negative integer no greater than 2'\n        )\n    }\n  }\n}\nexport default curry2\n```\n\n经过tsc编译后，es6的代码如下\n\n```javascript\nfunction curry2(func) {\n    return function f2(a, b) {\n        switch (arguments.length) {\n            case 0:\n                return f2;\n            case 1:\n                return (_b) => {\n                    return func(a, _b);\n                };\n            case 2:\n                return func(a, b);\n            default:\n                throw new Error('curry2 arity must be a non-negative integer no greater than 2');\n        }\n    };\n}\n```\n\n#### typescript 实现任意个参数函数的柯里化\n\n柯里化的实质很简单，就是随便你分几次传参，每次传几个参数，每次传参都会把传进去的参数存到闭包里，直到传入了函数所有的参数才会进行调用。\n\n讲究的是延迟调用，也使得函数的传参更加灵活。\n\n\n\n下面实现了任意个参数的函数的柯里化，主要逻辑是不断收集传入函数的参数，直到收集齐参数后，用这些参数调用原来的函数即可。如果没有收集齐参数，则是递归调用，再次返回同一个函数，并且把收集到的参数都传入。\n\n\n\n```typescript\n/**\n *\n * @param fn  需要柯里化的函数\n * @param length 柯里化的参数个数，默认值为传入函数的参数个数\n * @returns 返回柯里化后的函数，可以传入任意小于原函数参数个数的参数，参数全部传递完成就会返回执行结果\n */\nfunction curryN(fn: (...args: any) => any, length: number = fn.length) {\n  return _curry(fn, length)\n}\n\nfunction _curry(fn: (...args: any) => any, length: number, ...args: any) {\n  // args 是已经收集到的数据，函数第一次执行时不传入相当于0\n  // param用来收集这次传入的参数\n  // _args则是把两者拼起来，累计已经收集到的数据\n  return function (...params: any) {\n    //   收集所有输入的参数\n    let _args = [...args, ...params]\n    // 如果收集参数的个数达到最初得到的函数参数总个数,直接传入收集到的所有参数并返回执行结果\n    if (_args.length >= length) {\n      return fn(..._args)\n    } else {\n      // 如果收集的参数未达到目标,继续收集参数\n      return _curry(fn, length, ..._args)\n    }\n  }\n}\n\nexport default curryN\n```\n\n下面是编译成es6\n\n```javascript\n/**\n *\n * @param fn  需要柯里化的函数\n * @param length 柯里化的参数个数，默认值为传入函数的参数个数\n * @returns 返回柯里化后的函数，可以传入任意小于原函数参数个数的参数，参数全部传递完成就会返回执行结果\n */\nfunction curryN(fn, length = fn.length) {\n    return _curry(fn, length);\n}\nfunction _curry(fn, length, ...args) {\n    // args 是已经收集到的数据，函数第一次执行时不传入相当于0\n    // param用来收集这次传入的参数\n    // _args则是把两者拼起来，累计已经收集到的数据\n    return function (...params) {\n        //   收集所有输入的参数\n        let _args = [...args, ...params];\n        // 如果收集参数的个数达到最初得到的函数参数总个数,直接传入收集到的所有参数并返回执行结果\n        if (_args.length >= length) {\n            return fn(..._args);\n        }\n        else {\n            // 如果收集的参数未达到目标,继续收集参数\n            return _curry(fn, length, ..._args);\n        }\n    };\n}\nexports.default = curryN;\n```\n\n#### typescript 给curryN添加占位符功能\n\nlodash的curry函数有用占位符，调整参数传入顺序的功能，简单来说就是占位符所在的参数可以延后传入的时间。\n\n下面是例子\n\n```javascript\nlet fn = function(a, b, c, d, e) {\n    console.log([a, b, c, d, e]);\n}\n\nlet _fn = _.curry(fn);  \n_fn(1, 2, 3, 4, 5);                 // print: 1,2,3,4,5\n_fn(_, 2, 3, 4, 5)(1);              // print: 1,2,3,4,5\n_fn(1, _, 3, 4, 5)(2);              // print: 1,2,3,4,5\n```\n\nlodash采用了lodash对象来做占位符，但是我们的curry函数没有挂载对象，因此采用了curry函数自身作为默认的占位符\n\n\n\n下面是具体实现\n\n相比之前就复杂了很多，因为我们还要记录占位符和占位符的位置。\n\n```typescript\n/**\n * 返回柯里化后的函数，支持用占位符改变参数的传递顺序，\n * 默认的占位符是curry函数本身\n *\n * @param fn 柯里化的原函数\n * @param length 需要的参数个数，默认为函数的形参个数\n * @param placeHolder 占位符，默认当前柯里化函数\n * @returns 柯里化后的函数\n */\nfunction curry(\n  fn: (...args: any) => any,\n  length: number = fn.length,\n  placeHolder: any = curry\n) {\n  return _curry(fn, length, placeHolder, [], [])\n}\n/**\n * 递归调用实现柯里化的中间函数\n * @param fn 柯里化的原函数\n * @param length 原函数需要的参数个数\n * @param placeHolder 接收的占位符\n * @param argsCopy 已接收的参数列表\n * @param holdersCopy 已接收的占位符位置列表\n * @returns 柯里化后的函数,或是递归调用收集参数的函数\n */\nfunction _curry(\n  fn: (...args: any) => any,\n  length: number = fn.length,\n  placeHolder: any,\n  args: any[],\n  holders: number[]\n) {\n  return function (..._args: any) {\n    //   两个参数列表是引用类型，复制一份后再操作，防止函数重复调用操作初始值地址把初始值搞乱影响结果\n    let argsCopy = args.slice()\n    let holdersCopy = holders.slice()\n\n    _args.forEach((value: any, index: number) => {\n      if (argsCopy.length < length) {\n        //   如果新增参数中包含占位符，除了加入args列表，还要再在holders里面添加位置索引\n        if (value === placeHolder) {\n          // 占位符的位置就是当前参数数组末尾\n          holdersCopy.push(argsCopy.length)\n          argsCopy.push(placeHolder)\n        } else {\n          // 如果是普通参数，直接加入args现存参数列表\n          argsCopy.push(value)\n        }\n      }\n      // 参数列表等于函数形参个数，此时占位符全部忽略,开始清理占位符，替换占位符为新增参数\n      else {\n        if (value !== placeHolder && holdersCopy.length > 0) {\n          const holdIdx = holdersCopy[0]\n          holdersCopy.shift()\n          argsCopy[holdIdx] = value\n        }\n      }\n    })\n    //现存参数等于形参，并且占位符全部替换完成,说明参数收集完成=\n    if (argsCopy.length >= length && holdersCopy.length <= 0) {\n      return fn(...argsCopy)\n    } else {\n      // 参数没有收集齐，则进入下一轮收集\n      return _curry(fn, length, placeHolder, argsCopy, holdersCopy)\n    }\n  }\n}\n\nexport default curry\n```\n\n编译成es6\n\n```javascript\n/**\n * 递归调用实现柯里化的中间函数\n * @param fn 柯里化的原函数\n * @param length 原函数需要的参数个数\n * @param placeHolder 接收的占位符\n * @param argsCopy 已接收的参数列表\n * @param holdersCopy 已接收的占位符位置列表\n * @returns 柯里化后的函数,或是递归调用收集参数的函数\n */\nfunction _curry(fn, length = fn.length, placeHolder, args, holders) {\n    return function (..._args) {\n        //   两个参数列表是引用类型，复制一份后再操作，防止函数重复调用操作初始值地址把初始值搞乱影响结果\n        let argsCopy = args.slice();\n        let holdersCopy = holders.slice();\n        _args.forEach((value, index) => {\n            if (argsCopy.length < length) {\n                //   如果新增参数中包含占位符，除了加入args列表，还要再在holders里面添加位置索引\n                if (value === placeHolder) {\n                    // 占位符的位置就是当前参数数组末尾\n                    holdersCopy.push(argsCopy.length);\n                    argsCopy.push(placeHolder);\n                }\n                else {\n                    // 如果是普通参数，直接加入args现存参数列表\n                    argsCopy.push(value);\n                }\n            }\n            // 参数列表等于函数形参个数，此时占位符全部忽略,开始清理占位符，替换占位符为新增参数\n            else {\n                if (value !== placeHolder && holdersCopy.length > 0) {\n                    const holdIdx = holdersCopy[0];\n                    holdersCopy.shift();\n                    argsCopy[holdIdx] = value;\n                }\n            }\n        });\n        //现存参数等于形参，并且占位符全部替换完成,说明参数收集完成=\n        if (argsCopy.length >= length && holdersCopy.length <= 0) {\n            return fn(...argsCopy);\n        }\n        else {\n            // 参数没有收集齐，则进入下一轮收集\n            return _curry(fn, length, placeHolder, argsCopy, holdersCopy);\n        }\n    };\n}\n```\n\n#### jest为curry函数编写单元测试\n\n```typescript\nimport curry from '../../fp-lib/curry'\n\ntest('normal curry test', () => {\n  const testFn = (a, b, c, d, e) => {\n    return [a, b, c, d, e]\n  }\n  const input = [1, 2, 3, 4, 5]\n  const expected = [1, 2, 3, 4, 5]\n  const curriedFn = curry(testFn)\n  expect(curriedFn(1)(2)(3)(4)(5)).toEqual(expected)\n  expect(curriedFn(1)(2, 3)(4)(5)).toEqual(expected)\n  expect(curriedFn(1)(2, 3)(4, 5)).toEqual(expected)\n  expect(curriedFn(...input)).toEqual(expected)\n})\n\ntest('curry placeholder', () => {\n  const testFn = (a, b, c, d, e) => {\n    return [a, b, c, d, e]\n  }\n  const input = [1, 2, 3, 4, 5]\n  const expected = [1, 2, 3, 4, 5]\n  const curriedFn = curry(testFn)\n  // 默认占位符是curry函数本身\n  expect(curriedFn(1)(curry)(3)(4)(5)(2)).toEqual(expected)\n  expect(curriedFn(1)(curry, 3)(4)(5)(2)).toEqual(expected)\n  expect(curriedFn(1)(2, 3)(curry, curry)(4)(5)).toEqual(expected)\n})\n```\n\n## 03.函数组合 (Function Composing)\n\n接收多个函数作为参数，从右到左，一个函数的输入为另一个函数的输出。\n\n```javascript\nconst compose = (f, g) => (a) => f(g(a))    // 定义\nconst floorAndToString = compose((val) => val.toString(), Math.floor) // 使用\nfloorAndToString(12.12)   // '12'\n```\n\n下面从相关的术语开始介绍.\n\n### 1.范畴 (Category)\n\n在范畴论中，范畴是指对象集合及它们之间的态射 (morphism)。在编程中，数据类型作为对象，函数作为态射。\n\n一个有效的范畴遵从以下三个原则：\n\n1. 必有一个 identity 态射，使得 map 一个对象是它自身。`a` 是范畴里的一个对象时，必有一个函数使 `a -> a`。\n2. 态射必是可组合的。`a`，`b`，`c` 是范畴里的对象，`f` 是态射 `a -> b`，`g` 是 `b -> c` 态射。`g(f(x))` 一定与 `(g ● f)(x)` 是等价的。\n3. 组合满足结合律。`f ● (g ● h)` 与 `(f ● g) ● h` 是等价的。\n\n由于组合的结合律,我们一连串函数的组合,就可以像积木一样任意拆分了,具有很大的灵活性.\n\n下面是一个典型的例子\n\n```javascript\nvar loudLastUpper = compose(exclaim, toUpperCase, head, reverse);\n\n// 或\nvar last = compose(head, reverse);\nvar loudLastUpper = compose(exclaim, toUpperCase, last);\n\n// 或\nvar last = compose(head, reverse);\nvar angry = compose(exclaim, toUpperCase);\nvar loudLastUpper = compose(angry, last);\n\n// 更多变种...\n```\n\n#### 态射 (Morphism)\n\n一个变形的函数。\n\n**自同态 (Endomorphism)**\n\n输入输出是相同类型的函数。\n\n```js\n// uppercase :: String -> String\nconst uppercase = (str) => str.toUpperCase()\n\n// decrement :: Number -> Number\nconst decrement = (x) => x - 1\n```\n\n\n\n**同构 (Isomorphism)**\n\n不用类型对象的变形，保持结构并且不丢失数据。\n\n例如，一个二维坐标既可以表示为数组 `[2, 3]`，也可以表示为对象 `{x: 2, y: 3}`。\n\n```js\n// 提供函数在两种类型间互相转换\nconst pairToCoords = (pair) => ({x: pair[0], y: pair[1]})\n\nconst coordsToPair = (coords) => [coords.x, coords.y]\n\ncoordsToPair(pairToCoords([1, 2])) // [1, 2]\n\npairToCoords(coordsToPair({x: 1, y: 2})) // {x: 1, y: 2}\n```\n\n\n\n### 2.identity态射\n\n让我们介绍一个名为 `id` 的实用函数。这个函数接受随便什么输入然后原封不动地返回它：\n\n```javascript\nvar id = function(x){ return x; };\n```\n\n有下面的例子\n\n```javascript\n// identity\ncompose(id, f) == compose(f, id) == f;\n// true\n```\n\n因为id函数返回传入的参数的特性,相当于它就什么都没做,有他没他一个样,所以就有了上面的等式.\n\nid函数就相当于乘法运算里的1,加法运算里的0.同时compose和这两种运算一样都是满足结合律的.\n\n下面我们要实现的compose函数,当你不传入参数进行调用时,就是返回一个id函数\n\n\n\n### 3.Point-Free 风格 (Point-Free Style)\n\n定义函数时，不显式地指出函数所带参数。这种风格通常需要柯里化或者高阶函数。也叫 Tacit programming。\n\n```javascript\nconst map = (fn) => (list) => list.map(fn)\nconst add = (a) => (b) => a + b\n\n# Points-Free   list 是显式参数\nconst incrementAll = (numbers) => map(add(1))(numbers)\n\n# Points-Free   list 是隐式参数\nconst incrementAll2 = map(add(1))\n```\n\n`incrementAll` 识别并且使用了 `numbers` 参数，因此它不是 Point-Free 风格的。 `incrementAll2` 连接函数与值，并不提及它所使用的参数，因为它是 Point-Free 风格的。\n\nPoint-Free 风格的函数就像平常的赋值，不使用 `function` 或者 `=>`。\n\npoint free最明显的好处是,能够帮助我们减少不必要的命名，让代码保持简洁和通用。毕竟现在的ide都很智能了,如果我们要看函数的参数,直接光标移到函数上就能显示出来了,没必要特意写出参数,这样代码会更简洁.\n\n### 4.typescript实现接收任意个函数参数的compose函数\n\n我们只需要接收任意个函数参数,然后用reduce循环套娃就可以了.\n\n```typescript\n/**\n * 组合任意多个函数\n * @param funcs 被组合的函数\n * @returns 返回组合后的函数\n */\n\nfunction compose(...funcs: ((...args: any) => any)[]) {\n  if (funcs.length === 0) {\n    //   compose不传入参数的情况,返回一个返回输入的函数,也就是id函数\n    return (x: any) => x\n  }\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n  return funcs.reduce(function (\n    a: (...args: any) => any,\n    b: (...args: any) => any\n  ): (...args: any) => any {\n    return (...args: any) => {\n      return a(b(...args))\n    }\n  })\n}\nexport default compose\n\n```\n\n下面是编译成es6后的代码\n\n```javascript\n\"use strict\";\n/**\n * 组合任意多个函数\n * @param funcs 被组合的函数\n * @returns 返回组合后的函数\n */\nfunction compose(...funcs) {\n    if (funcs.length === 0) {\n        //   compose不传入参数的情况,返回一个返回输入的函数,也就是id函数\n        return (x) => x;\n    }\n    if (funcs.length === 1) {\n        return funcs[0];\n    }\n    return funcs.reduce(function (a, b) {\n        return (...args) => {\n            return a(b(...args));\n        };\n    });\n}\n```\n\n### 5.使用jest测试组合函数\n\n```typescript\nimport compose from '../../fp-lib/compose'\n\ntest('normal compose', () => {\n  const add = (x) => x + 1\n  expect(compose(add, add, add, add, add)(0)).toBe(5)\n\n  // 测试0个参数时\n  expect(compose()(add)).toBe(add)\n  // 测试1个参数时\n  expect(compose(add)).toBe(add)\n})\n```\n\n### 6.组合中的debug\n\n组合就类似于shell中的管道,因此比较常见的debug方法就是把在管道的某处把数据打印出来查看.\n\n我们可以实现一个trace函数来进行debug.\n\n下面是typescript中的一个具体的实现,\n\n这样我们在组合中加入这个函数,可以查看某处的数据,并且不会影响后续的数据流\n\n```typescript\nimport curry from './curry'\n\nconst trace = curry(function (tag: string, x: any): any {\n  console.log(tag, x)\n  return x\n})\n\nexport default trace\n```\n\n## 04.类型签名(Type Signatures)\n\n虽然typescript也有类型,但是当你用compose把函数串联起来的最终函数,是显示不出中间的路径的.\n\n所以我们要给自己的代码添加类型注释,以便让自己以后还能看懂自己的代码.\n\n\n\n这次我们介绍的是一种比较通用的类型注释系统 Hindley-Milner函数签名 .\n\n下面是一些常见函数类型的写法,一个箭头表示一次传参.\n\n```js\n//  capitalize :: String -> String\nvar capitalize = function(s){\n  return toUpperCase(head(s)) + toLowerCase(tail(s));\n}\n\ncapitalize(\"smurf\");\n//=> \"Smurf\"\n```\n\n```js\n//  strLength :: String -> Number\nvar strLength = function(s){\n  return s.length;\n}\n\n//  join :: String -> [String] -> String\nvar join = curry(function(what, xs){\n  return xs.join(what);\n});\n\n//  match :: Regex -> String -> [String]\nvar match = curry(function(reg, s){\n  return s.match(reg);\n});\n\n//  replace :: Regex -> String -> String -> String\nvar replace = curry(function(reg, sub, s){\n  return s.replace(reg, sub);\n});\n\n// 下面的a,b属于任意类型\n//  id :: a -> a\nvar id = function(x){ return x; }\n\n//  map :: (a -> b) -> [a] -> [b]\nvar map = curry(function(f, xs){\n  return xs.map(f);\n});\n//  head :: [a] -> a\nvar head = function(xs){ return xs[0]; }\n\n//  filter :: (a -> Bool) -> [a] -> [a]\nvar filter = curry(function(f, xs){\n  return xs.filter(f);\n});\n\n//  reduce :: (b -> a -> b) -> b -> [a] -> b\nvar reduce = curry(function(f, x, xs){\n  return xs.reduce(f, x);\n});\n```\n\n### 自由定理（free theorems）\n\n类型签名除了能够帮助我们推断函数可能的实现，还能够给我们带来*自由定理*（free theorems）\n\n下面是两个例子\n\n```js\n// head :: [a] -> a\ncompose(f, head) == compose(head, map(f));\n\n// filter :: (a -> Bool) -> [a] -> [a]\ncompose(map(f), filter(compose(p, f))) == compose(filter(p), map(f));\n```\n\n这些等式是直接根据类型可以推断出来的\n\n第一个例子中，等式左边说的是，先获取数组的`头部`，然后对它调用函数 `f`；等式右边说的是，先对数组中的每一个元素调用 `f`，然后再取其返回结果的`头部`。这两个表达式的作用是相等的，但是前者要快得多。\n\n第二个例子 `filter` 也是一样。等式左边是说，先组合 `f` 和 `p` 检查哪些元素要过滤掉，然后再通过 `map` 实际调用 `f`（别忘了 `filter` 是不会改变数组中元素的，这就保证了 `a` 将保持不变）；等式右边是说，先用 `map` 调用 `f`，然后再根据 `p` 过滤元素。这两者也是相等的。\n\n### 类型约束（type constraints）\n\n签名也可以把类型约束为一个特定的接口\n\n```js\n// sort :: Ord a => [a] -> [a]\n```\n\n比如上面的注释表明 a变量是一个Ord对象.\n\n\n\n## 05.函子 (Functor)\n\n一个实现了map 函数的对象，map 会遍历对象中的每个值并生成一个新的对象。遵守两个准则\n\n**一致性 (Preserves identity)**\n\n```js\nobject.map(x => x) ≍ object\n```\n\n**组合性 (Composable)**\n\n```js\nobject.map(compose(f, g)) ≍ object.map(g).map(f)  // f, g 为任意函数\n```\n\n在 javascript 中一个常见的函子是 Array, 因为它遵守因子的两个准则。\n\n```js\nconst f = x => x + 1\nconst g = x => x * 2\n\n;[1, 2, 3].map(x => f(g(x)))\n;[1, 2, 3].map(g).map(f)\n```\n\n**Pointed Functor**\n\n一个实现了 of 函数的对象。\n\nES2015 添加了 `Array.of`，使 Array 成为了 Pointed Functor。\n\n```\nArray.of(1)\n```\n\n下面我们从关于functor开始介绍\n\n### 1.容器（container）\n\n下面我们封装一个能装载任意类型值的容器.\n\n容器是一个对象,使用of作为构造器(Pointed Functor),因为对象默认的new关键字在函数式编程里还是太别扭了.\n\n使用typescript的实现如下\n\n其中我们把of作为一个static方法,这样就可以直接通过类名调用了,相当于一个简单工厂函数.\n\n```typescript\nclass Container {\n  private value: any\n  constructor(value: any) {\n    this.value = value\n  }\n\n  static of(value: any) {\n    return new Container(value)\n  }\n}\n```\n\n下面我们可以试试这个容器\n\n```javascript\n> Container.of(3)\nContainer { value: 3 }\n> Container.of('hotdogs')\nContainer { value: 'hotdogs' }\n> Container.of(Container.of({ name: 'yoda' }))\nContainer { value: Container { value: { name: 'yoda' } } }\n```\n\n\n\n- `Container` 是个只有一个属性的对象。尽管容器可以有不止一个的属性，但大多数容器还是只有一个。\n- `value` 不能是某个特定的类型，不然 `Container` 就对不起它这个名字了。\n- 数据一旦存放到 `Container`，就会一直待在那儿。我们*可以*用 `.value` 获取到数据，但这样做有悖初衷,所以这里使用了private关键字防止外部访问.\n\n### 2.map函数\n\n容器有了值以后,我们还需要一个让别的函数能够操作它的方法.\n\n我们可以定义一个map方法,类似于数组的map.\n\n只不过这个map和数组map的区别是,这个map的参数是容器,作用是把容器里的值交给你定义好的函数处理.\n\n下面是这个map方法的实现\n\n```typescript\n// (a -> b) -> Container a -> Container b\nmap(f: (...args: any) => any):any {\n      return Container.of(f(this.value))\n  }\n```\n\n\n\n```js\nContainer.of(2).map(function(two){ return two + 2 })\n//=> Container(4)\n\n\nContainer.of(\"flamethrowers\").map(function(s){ return s.toUpperCase() })\n//=> Container(\"FLAMETHROWERS\")\n\n\nContainer.of(\"bombs\").map(concat(' away')).map(_.prop('length'))\n//=> Container(10)\n```\n\n这个map方法使得我们可以直接处理容器,而不用把容器中的值拿出来这一步.而且map函数执行完后,容器内的值并不会变化,保持了不变性.\n\n因为map的返回值是container,所以只要我们在map调用后再返回容器,就可以无限地用map链式调用下去...\n\n\n\n### 3.Maybe  一种带空值检查的functor\n\nContainer类似于Identity函数,会返回传入的值.\n\n过于单纯了,其实我们还可以添加对传入值的处理,比如检查传入的值是否为空\n\n下面是代码实现\n\n```typescript\n/**\n * Maybe 容器类，\n * 实现了map函数，并且map执行之前有空值检查\n */\nclass Maybe {\n  private value: any\n  constructor(value: any) {\n    this.value = value\n  }\n  static of(value: any) {\n    return new Maybe(value)\n  }\n  isNothing() {\n    return this.value === null || this.value === undefined\n  }\n  map(f: (...args: any) => any) {\n    return this.isNothing() ? Maybe.of(null) : Maybe.of(f(this.value))\n  }\n}\nexport default Maybe\n```\n\n使用这个Maybe容器的好处是,出现null的时候就不会报错了,因为每次执行之前都有空值检查,如果有一次是null,后续的map无论执行多少次都是null.\n\n\n\n### 4.更通用的map\n\n我们使用柯里化,可以定义一个map可以应用到所有functor上面.这样我们就能像处理普通函数的参数一样处理functor了.\n\n```js\n//  map :: Functor f => (a -> b) -> f a -> f b\nvar map = curry(function(f, any_functor_at_all) {\n  return any_functor_at_all.map(f);\n});\n```\n\n### 5.Maybe使用场景\n\n`Maybe` 最常用在那些可能会无法成功返回结果的函数中。\n\n```js\n//  safeHead :: [a] -> Maybe(a)\nvar safeHead = function(xs) {\n  return Maybe.of(xs[0]);\n};\n\nvar streetName = compose(map(_.prop('street')), safeHead, _.prop('addresses'));\n\nstreetName({addresses: []});\n// Maybe(null)\n\nstreetName({addresses: [{street: \"Shady Ln.\", number: 4201}]});\n// Maybe(\"Shady Ln.\")\n```\n\n有时候函数可以明确返回一个 `Maybe(null)` 来表明失败\n\n### 6.纯错误处理\n\n`throw/catch`并非纯错误处理,因为他们抛出错误的时候,函数不会收到返回值.\n\n下面我们用一种更友好的方式来进行处理.\n\n下面是使用Either进行错误处理的实现,其中Left和Right是Either的子类.\n\nLeft调用map只会返回自身,所以我们在出错的时候返回Left最后错误的结果就会传递到末尾.\n\n```typescript\nclass Left {\n  private value: any\n  constructor(value: any) {\n    this.value = value\n  }\n  static of(value: any) {\n    return new Left(value)\n  }\n  map(f: (...args: any) => any): Left {\n    return this\n  }\n}\nclass Right {\n  private value: any\n  constructor(value: any) {\n    this.value = value\n  }\n  static of(value: any) {\n    return new Right(value)\n  }\n  map(f: (...args: any) => any): Right {\n    return Right.of(f(this.value))\n  }\n}\n\n```\n\n下面是具体的使用例子\n\n```javascript\nvar moment = require('moment');\n\n//  getAge :: Date -> User -> Either(String, Number)\nvar getAge = curry(function(now, user) {\n  var birthdate = moment(user.birthdate, 'YYYY-MM-DD');\n  if(!birthdate.isValid()) return Left.of(\"Birth date could not be parsed\");\n  return Right.of(now.diff(birthdate, 'years'));\n});\n\ngetAge(moment(), {birthdate: '2005-12-12'});\n// Right(9)\n\ngetAge(moment(), {birthdate: 'balloons!'});\n// Left(\"Birth date could not be parsed\")\n```\n\n我们也可以使用柯里化,把either变成一个用于错误处理的函数\n\n```js\n//  either :: (a -> c) -> (b -> c) -> Either a b -> c\nvar either = curry(function(f, g, e) {\n  switch(e.constructor) {\n    case Left: return f(e.__value);\n    case Right: return g(e.__value);\n  }\n});\n\n//  zoltar :: User -> _\n// 这里的id函数仅仅用于传递值给log\nvar zoltar = compose(console.log, either(id, fortune), getAge(moment()));\n\nzoltar({birthdate: '2005-12-12'});\n// \"If you survive, you will be 10\"\n// undefined\n\nzoltar({birthdate: 'balloons!'});\n// \"Birth date could not be parsed\"\n// undefined\n```\n\n\n\n### 7.副作用处理\n\n有很多函数都有副作用，但是我们可以通过把它包裹在另一个函数里的方式把它变得看起来像一个纯函数。\n\n其实就是把函数再包裹一层，执行的时候就会返回函数本身罢了。\n\n下面是一个例子\n\n```typescript\nimport compose from './compose'\nclass IO {\n  // 保存函数的容器\n  __fn: (...args: any) => any\n\n  constructor(fn: (...args: any) => any) {\n    this.__fn = fn\n  }\n\n  static of(x: any) {\n    return new IO(function () {\n      return x\n    })\n  }\n\n  map(f: (...args: any) => any) {\n    return new IO(compose(f, this.__fn))\n  }\n}\n```\n\nio容器用来包裹产生副作用的函数。\n\n这样做的好处是，把责任推迟到调用的时候，变量用`  __fn`命名，是为了起到警示作用，告诉调用者，这个部分是有副作用的。\n\n下面是个调用的例子\n\n```typescript\n////// 纯代码库: lib/params.js ///////\n\n//  url :: IO String\nvar url = new IO(function() { return window.location.href; });\n\n//  toPairs =  String -> [[String]]\nvar toPairs = compose(map(split('=')), split('&'));\n\n//  params :: String -> [[String]]\nvar params = compose(toPairs, last, split('?'));\n\n//  findParam :: String -> IO Maybe [String]\nvar findParam = function(key) {\n  return map(compose(Maybe.of, filter(compose(eq(key), head)), params), url);\n};\n\n////// 非纯调用代码: main.js ///////\n\n// 调用 __fn() 来运行它！\nfindParam(\"searchTerm\").__fn();\n// Maybe(['searchTerm', 'wafflehouse'])\n```\n\n\n\n### 8.关于functor的一些理论\n\n同一律和结合律\n\n```js\n// identity\nmap(id) === id;\n// composition\ncompose(map(f), map(g)) === map(compose(f, g));\n```\n\n\n\n## 06.Monad\n\n拥有 `of` 和 `chain` 函数的对象。`chain` 很像 `map`， 除了用来铺平嵌套数据。\n\n```js\nArray.prototype.chain = function (f) {\n  return this.reduce((acc, it) => acc.concat(f(it)), [])  \n}\n\n// ['cat', 'dog', 'fish', 'bird']\n;Array.of('cat,dog', 'fish,bird').chain(s => s.split(','))\n\n// [['cat', 'dog'], ['fish', 'bird']]\n;Array.of('cat,dog', 'fish,bird').map(s => s.split(','))\n```\n\n在有些语言中，`of` 也称为 `return`，`chain` 也称为 `flatmap` 与 `bind`。\n\n\n\n### 1.join方法\n\n下面是一个例子，当functor之间存在嵌套的时候，我们需要新的解决方案，\n\n因为这种情况下，你需要调用多次才能取到值。\n\n```js\n// Support\n// ===========================\nvar fs = require('fs');\n\n//  readFile :: String -> IO String\nvar readFile = function(filename) {\n  return new IO(function() {\n    return fs.readFileSync(filename, 'utf-8');\n  });\n};\n\n//  print :: String -> IO String\nvar print = function(x) {\n  return new IO(function() {\n    console.log(x);\n    return x;\n  });\n}\n\n// Example\n// ===========================\n//  cat :: IO (IO String)\nvar cat = compose(map(print), readFile);\n\ncat(\".git/config\")\n// IO(IO(\"[core]\\nrepositoryformatversion = 0\\n\"))\n```\n\n下面我们定义一个join函数，作用就是把嵌套解开，直接返回容器包裹的值，这样就不会出现容器包容器的事情了。\n\n下面是一个实例\n\n```js\n//  join :: Monad m => m (m a) -> m a\nvar join = function(mma){ return mma.join(); }\n\n//  firstAddressStreet :: User -> Maybe Street\nvar firstAddressStreet = compose(\n  join, map(safeProp('street')), join, map(safeHead), safeProp('addresses')\n);\n\nfirstAddressStreet(\n  {addresses: [{street: {name: 'Mulburry', number: 8402}, postcode: \"WC2N\" }]}\n);\n// Maybe({name: 'Mulburry', number: 8402})\n```\n\n### 2.chain\n\n我们只要紧跟着map后面调用join，就是chain函数了。\n\nchain又称为flatMap\n\n```js\n//  chain :: Monad m => (a -> m b) -> m a -> m b\nvar chain = curry(function(f, m){\n  return m.map(f).join(); // 或者 compose(join, map(f))(m)\n});\n```\n\n## 07.Applicative Functor\n\n一个拥有 ap 函数的对象。\n\n```js\n// 实现\nArray.prototype.ap = function (xs) {\n    return this.reduce((acc, f) => acc.concat(xs.map(f)), [])\n}\n\n// 示例\n;[(a) => a + 1].ap([1]) // [2]\n```\n\n如果你有两个对象，并需要对他们的元素执行一个二元函数\n\n```js\n// Arrays that you want to combine\nconst arg1 = [1, 3]\nconst arg2 = [4, 5]\n\n// combining function - must be curried for this to work\nconst add = (x) => (y) => x + y\n\nconst partiallyAppliedAdds = [add].ap(arg1) // [(y) => 1 + y, (y) => 3 + y]\n```\n\n由此得到了一个函数数组，并且可以调用 `ap` 函数得到结果\n\n```js\npartiallyAppliedAdds.ap(arg2) // [5, 6, 7, 8]\n```\n\n### 1.ap函数\n\n当我们相对容器中的值直接计算，把一个容器作为参数传递给另一个容器，我们发现是非常困难的。\n\n```js\n// 这样是行不通的，因为 2 和 3 都藏在瓶子里。\nadd(Container.of(2), Container.of(3));\n//NaN\n\n// 使用可靠的 map 函数试试\nvar container_of_add_2 = map(add, Container.of(2));\n// Container(add(2))\n```\n\n我们可以用chain函数达到效果\n\n```js\nContainer.of(2).chain(function(two) {\n  return Container.of(3).map(add(two));\n});\n```\n\n但是这种方式的缺点很明显，那就是 monad 的顺序执行问题：所有的代码都只会在前一个 monad 执行完毕之后才执行。\n\n\n\n实际上我们可以用ap来实现这个效果\n\n`ap` 就是一种函数，能够把一个 functor 的函数值应用到另一个 functor 的值上。\n\n下面是一个简单的实现。\n\n```js\nContainer.prototype.ap = function(other_container) {\n  return other_container.map(this.__value);\n}\n```\n\n这样我们就可以针对容器进行操作了。\n\n在容器中封装一个curry化好的add函数，这样，后续可以调用ap传入其他容器\n\n```js\nContainer.of(add(2)).ap(Container.of(3));\n// Container(5)\n\n// all together now\nContainer.of(2).map(add).ap(Container.of(3));\n// Container(5)\n```\n\n\n\n下面有一个特性\n\n```js\nF.of(x).map(f) == F.of(f).ap(F.of(x))\n```\n\n翻译过来就是，map 一个 `f` 等价于 `ap` 一个值为 `f` 的 functor\n\n### 2.lift\n\nLifting指的是当你有放在对象里的值，比如各种functor，你可以把他们里面的值用ap调用。\n\n有些实现会命名为 `lift`, `liftA2` \n\n```js\nconst liftA2 = (f) => (a, b) => a.map(f).ap(b) // note it's `ap` and not `map`.\n\nconst mult = a => b => a * b\n\nconst liftedMult = liftA2(mult) // this function now works on functors like array\n\nliftedMult([1, 2], [3]) // [3, 6]\nliftA2(a => b => a + b)([1, 2], [3, 4]) // [4, 5, 5, 6]\n```\n\nLifting 针对只有一个参数的函数的时候效果等于 `map`.\n\n```js\nconst increment = (x) => x + 1\n\nlift(increment)([2]) // [3]\n;[2].map(increment) // [3]\n```\n\n下面是Lift函数实现的例子\n\n```js\nvar liftA2 = curry(function(f, functor1, functor2) {\n  return functor1.map(f).ap(functor2);\n});\n\nvar liftA3 = curry(function(f, functor1, functor2, functor3) {\n  return functor1.map(f).ap(functor2).ap(functor3);\n});\n\n//liftA4, etc\n```\n\n下面是用例：\n\n```js\n// checkEmail :: User -> Either String Email\n// checkName :: User -> Either String String\n\n//  createUser :: Email -> String -> IO User\nvar createUser = curry(function(email, name) { /* creating... */ });\n\nEither.of(createUser).ap(checkEmail(user)).ap(checkName(user));\n// Left(\"invalid email\")\n\nliftA2(createUser, checkEmail(user), checkName(user));\n// Left(\"invalid email\")\n```\n\n我们用lift重写上面的用例\n\n```js\nliftA2(add, Maybe.of(2), Maybe.of(3));\n// Maybe(5)\n\nliftA2(renderPage, Http.get('/destinations'), Http.get('/events'))\n// Task(\"<div>some page with dest and events</div>\")\n\nliftA3(signIn, getVal('#email'), getVal('#password'), IO.of(false));\n// IO({id: 3, email: \"gg@allin.com\"})\n```\n\n### 3.相关的范畴学知识\n\n#### 同一律（identity）\n\n```js\n// 同一律\nA.of(id).ap(v) == v\n```\n\n是的，对一个 functor 应用 `id` 函数不会改变 `v` 里的值。比如：\n\n```js\nvar v = Identity.of(\"Pillow Pets\");\nIdentity.of(id).ap(v) == v\n```\n\n`Identity.of(id)` 的“无用性”让我不禁莞尔。这里有意思的一点是，就像我们之前证明了的，`of/ap` 等价于 `map`，因此这个同一律遵循的是 functor 的同一律：`map(id) == id`。\n\n使用这些定律的优美之处在于，就像一个富有激情的幼儿园健身教练让所有的小朋友都能愉快地一块玩耍一样，它们能够强迫所有的接口都能完美结合。\n\n#### 同态（homomorphism）\n\n```js\n// 同态\nA.of(f).ap(A.of(x)) == A.of(f(x))\n```\n\n*同态*就是一个能够保持结构的映射（structure preserving map）。实际上，functor 就是一个在不同范畴间的同态，因为 functor 在经过映射之后保持了原始范畴的结构。\n\n事实上，我们不过是把普通的函数和值放进了一个容器，然后在里面进行各种计算。所以，不管是把所有的计算都放在容器里（等式左边），还是先在外面进行计算然后再放到容器里（等式右边），其结果都是一样的。\n\n一个简单例子：\n\n```js\nEither.of(_.toUpper).ap(Either.of(\"oreos\")) == Either.of(_.toUpper(\"oreos\"))\n```\n\n#### 互换（interchange）\n\n互换（interchange）表明的是选择让函数在 `ap` 的左边还是右边发生 lift 是无关紧要的。\n\n```js\n// 互换\nv.ap(A.of(x)) == A.of(function(f) { return f(x) }).ap(v)\n```\n\n这里有个例子：\n\n```js\nvar v = Task.of(_.reverse);\nvar x = 'Sparklehorse';\n\nv.ap(Task.of(x)) == Task.of(function(f) { return f(x) }).ap(v)\n```\n\n#### 组合（composition）\n\n最后是组合。组合不过是在检查标准的函数组合是否适用于容器内部的函数调用。\n\n```js\n// 组合\nA.of(compose).ap(u).ap(v).ap(w) == u.ap(v.ap(w));\nvar u = IO.of(_.toUpper);\nvar v = IO.of(_.concat(\"& beyond\"));\nvar w = IO.of(\"blood bath \");\n\nIO.of(_.compose).ap(u).ap(v).ap(w) == u.ap(v.ap(w))\n```\n\n"}},"__N_SSG":true}