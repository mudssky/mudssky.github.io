{"pageProps":{"postData":{"id":"webpack5 手动配置vue3的开发环境","title":"webpack5 手动配置vue3的开发环境","date":"20210711142917","content":"# webpack5 手动配置vue3的开发环境\n\n## 01.安装webpack\n\n首先初始化 `package.json`\n\n```powershell\nnpm init -y\n```\n\n安装webpack和webpack-cli依赖\n\n```powershell\nnpm install webpack webpack-cli -save-dev\n```\n\n在项目根目录创建webpack的配置文件`webpack.config.js`\n\n```javascript\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: '[name].js'\n    }\n}\n```\n\n创建src目录，index.js文件\n\n```javascript\n// src/index.js\nconsole.log('test webpack')\n```\n\n在package.json的scripts字段，添加命令\n\n```json\n{\n  // ...\n  \"scripts\": {\n    \"build\": \"webpack\",\n  },\n  // ....\n}\n```\n\n此时执行`npm run build`即可打包\n\n\n\n## 02.基本功能配置\n\n\n\n\n\n### 1.配置typescript支持\n\n一些浏览器无法解析es6以上的高级语法,另外都2021年了,vue3是支持typescript的,所以我们也要配置typescript支持.\n\n另外早在2020年.babel就支持了typescript的转换,所以tsloader和babel里面选择一个安装就可以了，\n\n因为tsloader相比于babel的问题是兼容性只到es5，不过一般情况下也够用了。\n\nts-loader有typescript的静态代码检查功能，因为用typescript比较合适，虽然开了这个功能会降低编译速度\n\n另外babel和ts-loader可以一起配置，所以以后有需要也可以添加\n\n\n\n安装typescript和ts-loader\n\n```powershell\nnpm install typescript ts-loader --save-dev\n```\n\n修改webpack配置,匹配ts文件给ts-loader解析\n\n```js\nmodule.exports = {\n    // ...\n    module: {\n        rules: [\n            {\n                test: /\\.tsx?$/,\n                use: [\n                    'ts-loader'\n                ]\n            },\n            // ...\n        ]\n    },\n    // ...\n}\n```\n\n初始化tsconfig.json文件\n\n```powershell\nnpx tsc --init\n```\n\n注意再tsconfig 里面配置好你的输入输出目录\n\n我这里因为是生成单文件，所以我们用比较新的system.js模块输出，\n\n```json\n{\n  \"compilerOptions\": {\n    /* Visit https://aka.ms/tsconfig.json to read more about this file */\n\n    /* Basic Options */\n    // \"incremental\": true,                         /* Enable incremental compilation */\n    \"target\": \"es5\",                                /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021', or 'ESNEXT'. */\n    \"module\": \"system\",                           /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */\n    // \"lib\": [],                                   /* Specify library files to be included in the compilation. */\n    // \"allowJs\": true,                             /* Allow javascript files to be compiled. */\n    // \"checkJs\": true,                             /* Report errors in .js files. */\n    // \"jsx\": \"preserve\",                           /* Specify JSX code generation: 'preserve', 'react-native', 'react', 'react-jsx' or 'react-jsxdev'. */\n    // \"declaration\": true,                         /* Generates corresponding '.d.ts' file. */\n    // \"declarationMap\": true,                      /* Generates a sourcemap for each corresponding '.d.ts' file. */\n    // \"sourceMap\": true,                           /* Generates corresponding '.map' file. */\n    \"outFile\": \"dist/out.js\",                             /* Concatenate and emit output to single file. */\n    // \"outDir\": \"\",                              /* Redirect output structure to the directory. */\n    \"rootDir\": \"src\",                             /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n    // \"composite\": true,                           /* Enable project compilation */\n    // \"tsBuildInfoFile\": \"./\",                     /* Specify file to store incremental compilation information */\n    // \"removeComments\": true,                      /* Do not emit comments to output. */\n    // \"noEmit\": true,                              /* Do not emit outputs. */\n    // \"importHelpers\": true,                       /* Import emit helpers from 'tslib'. */\n    // \"downlevelIteration\": true,                  /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n    // \"isolatedModules\": true,                     /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n\n    /* Strict Type-Checking Options */\n    \"strict\": true,                                 /* Enable all strict type-checking options. */\n    // \"noImplicitAny\": true,                       /* Raise error on expressions and declarations with an implied 'any' type. */\n    // \"strictNullChecks\": true,                    /* Enable strict null checks. */\n    // \"strictFunctionTypes\": true,                 /* Enable strict checking of function types. */\n    // \"strictBindCallApply\": true,                 /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\n    // \"strictPropertyInitialization\": true,        /* Enable strict checking of property initialization in classes. */\n    // \"noImplicitThis\": true,                      /* Raise error on 'this' expressions with an implied 'any' type. */\n    // \"alwaysStrict\": true,                        /* Parse in strict mode and emit \"use strict\" for each source file. */\n\n    /* Additional Checks */\n    // \"noUnusedLocals\": true,                      /* Report errors on unused locals. */\n    // \"noUnusedParameters\": true,                  /* Report errors on unused parameters. */\n    // \"noImplicitReturns\": true,                   /* Report error when not all code paths in function return a value. */\n    // \"noFallthroughCasesInSwitch\": true,          /* Report errors for fallthrough cases in switch statement. */\n    // \"noUncheckedIndexedAccess\": true,            /* Include 'undefined' in index signature results */\n    // \"noImplicitOverride\": true,                  /* Ensure overriding members in derived classes are marked with an 'override' modifier. */\n    // \"noPropertyAccessFromIndexSignature\": true,  /* Require undeclared properties from index signatures to use element accesses. */\n\n    /* Module Resolution Options */\n    // \"moduleResolution\": \"node\",                  /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */\n    // \"baseUrl\": \"./\",                             /* Base directory to resolve non-absolute module names. */\n    // \"paths\": {},                                 /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\n    // \"rootDirs\": [],                              /* List of root folders whose combined content represents the structure of the project at runtime. */\n    // \"typeRoots\": [],                             /* List of folders to include type definitions from. */\n    // \"types\": [],                                 /* Type declaration files to be included in compilation. */\n    // \"allowSyntheticDefaultImports\": true,        /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\n    \"esModuleInterop\": true,                        /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n    // \"preserveSymlinks\": true,                    /* Do not resolve the real path of symlinks. */\n    // \"allowUmdGlobalAccess\": true,                /* Allow accessing UMD globals from modules. */\n\n    /* Source Map Options */\n    // \"sourceRoot\": \"\",                            /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n    // \"mapRoot\": \"\",                               /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,                     /* Emit a single file with source maps instead of having a separate file. */\n    // \"inlineSources\": true,                       /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n\n    /* Experimental Options */\n    // \"experimentalDecorators\": true,              /* Enables experimental support for ES7 decorators. */\n    // \"emitDecoratorMetadata\": true,               /* Enables experimental support for emitting type metadata for decorators. */\n\n    /* Advanced Options */\n    \"skipLibCheck\": true,                           /* Skip type checking of declaration files. */\n    \"forceConsistentCasingInFileNames\": true        /* Disallow inconsistently-cased references to the same file. */\n  }\n}\n```\n\n#### 添加vue支持\n\n```powershell\nnpm install vue@next -S\nnpm install vue-loader@next @vue/compiler-sfc -D\n```\n\n**注意**：`Vue2.x` 时安装的是 `vue-template-complier`\n\n详见官网的说明https://v3.cn.vuejs.org/guide/installation.html#npm\n\n修改webpack配置\n\n```js\nconst { VueLoaderPlugin } = require('vue-loader/dist/index');\n\nmodule.exports = {\n    // ...\n    module: {\n        rules: [\n            {\n                test: /\\.vue$/,\n                use: [\n                    'vue-loader'\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new VueLoaderPlugin()\n    ]\n}\n```\n\n然后从main.ts引入vue\n\n```javascript\n// index.js\nimport { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app')\n```\n\n注意这里会报两个错误,\n\n- 一个是提醒你module resolution 需要设置成node，也就是设置模块解析策略用node的\n- 还有一个错误是引入App.vue的报错，因为没有APP.vue的ts类型定义\n- ts标签报错\n\n第一个我们可以直接抄一份vue-cli的tsconfig过来里面就正常设置了。\n\n主要问题是我目前的需求是编译成单文件所以这个配置还需要改一下。\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"esnext\",\n    \"strict\": true,\n    \"jsx\": \"preserve\",\n    \"importHelpers\": true,\n    \"moduleResolution\": \"node\",\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"sourceMap\": true,\n    \"baseUrl\": \".\",\n    \"types\": [\n      \"webpack-env\"\n    ],\n    \"paths\": {\n      \"@/*\": [\n        \"src/*\"\n      ]\n    },\n    \"lib\": [\n      \"esnext\",\n      \"dom\",\n      \"dom.iterable\",\n      \"scripthost\"\n    ]\n  },\n  \"include\": [\n    \"src/**/*.ts\",\n    \"src/**/*.tsx\",\n    \"src/**/*.vue\",\n    \"tests/**/*.ts\",\n    \"tests/**/*.tsx\"\n  ],\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\n```\n\n我改一下就是下面的\n\n```json\n{\n  \"compilerOptions\": {\n    /* Visit https://aka.ms/tsconfig.json to read more about this file */\n    /* Basic Options */\n    // \"incremental\": true,                         /* Enable incremental compilation */\n    \"target\": \"es5\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021', or 'ESNEXT'. */,\n    \"module\": \"system\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\n    \"lib\": [\n      \"esnext\",\n      \"dom\",\n      \"dom.iterable\",\n      \"scripthost\"\n    ] /* Specify library files to be included in the compilation. */,\n    // \"allowJs\": true,                             /* Allow javascript files to be compiled. */\n    // \"checkJs\": true,                             /* Report errors in .js files. */\n    \"jsx\": \"preserve\" /* Specify JSX code generation: 'preserve', 'react-native', 'react', 'react-jsx' or 'react-jsxdev'. */,\n    // \"declaration\": true,                         /* Generates corresponding '.d.ts' file. */\n    // \"declarationMap\": true,                      /* Generates a sourcemap for each corresponding '.d.ts' file. */\n    // \"sourceMap\": true,                           /* Generates corresponding '.map' file. */\n    \"outFile\": \"dist/out.js\" /* Concatenate and emit output to single file. */,\n    // \"outDir\": \"\",                              /* Redirect output structure to the directory. */\n    \"rootDir\": \"src\" /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,\n    // \"composite\": true,                           /* Enable project compilation */\n    // \"tsBuildInfoFile\": \"./\",                     /* Specify file to store incremental compilation information */\n    // \"removeComments\": true,                      /* Do not emit comments to output. */\n    // \"noEmit\": true,                              /* Do not emit outputs. */\n    \"importHelpers\": true /* Import emit helpers from 'tslib'. */,\n    // \"downlevelIteration\": true,                  /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n    // \"isolatedModules\": true,                     /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n    /* Strict Type-Checking Options */\n    \"strict\": true /* Enable all strict type-checking options. */,\n    // \"noImplicitAny\": true,                       /* Raise error on expressions and declarations with an implied 'any' type. */\n    // \"strictNullChecks\": true,                    /* Enable strict null checks. */\n    // \"strictFunctionTypes\": true,                 /* Enable strict checking of function types. */\n    // \"strictBindCallApply\": true,                 /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\n    // \"strictPropertyInitialization\": true,        /* Enable strict checking of property initialization in classes. */\n    // \"noImplicitThis\": true,                      /* Raise error on 'this' expressions with an implied 'any' type. */\n    // \"alwaysStrict\": true,                        /* Parse in strict mode and emit \"use strict\" for each source file. */\n    /* Additional Checks */\n    // \"noUnusedLocals\": true,                      /* Report errors on unused locals. */\n    // \"noUnusedParameters\": true,                  /* Report errors on unused parameters. */\n    // \"noImplicitReturns\": true,                   /* Report error when not all code paths in function return a value. */\n    // \"noFallthroughCasesInSwitch\": true,          /* Report errors for fallthrough cases in switch statement. */\n    // \"noUncheckedIndexedAccess\": true,            /* Include 'undefined' in index signature results */\n    // \"noImplicitOverride\": true,                  /* Ensure overriding members in derived classes are marked with an 'override' modifier. */\n    // \"noPropertyAccessFromIndexSignature\": true,  /* Require undeclared properties from index signatures to use element accesses. */\n    /* Module Resolution Options */\n    \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\n    \"baseUrl\": \".\" /* Base directory to resolve non-absolute module names. */,\n    \"paths\": {\n      \"@/*\": [\"src/\"]\n    } /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */,\n    // \"rootDirs\": [],                              /* List of root folders whose combined content represents the structure of the project at runtime. */\n    // \"typeRoots\": [],                             /* List of folders to include type definitions from. */\n    // \"types\": [\n    //   \"webpack-env\"\n    // ] /* Type declaration files to be included in compilation. */,\n    \"allowSyntheticDefaultImports\": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,\n    \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\n    // \"preserveSymlinks\": true,                    /* Do not resolve the real path of symlinks. */\n    // \"allowUmdGlobalAccess\": true,                /* Allow accessing UMD globals from modules. */\n    /* Source Map Options */\n    // \"sourceRoot\": \"\",                            /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n    // \"mapRoot\": \"\",                               /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,                     /* Emit a single file with source maps instead of having a separate file. */\n    // \"inlineSources\": true,                       /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n    /* Experimental Options */\n    // \"experimentalDecorators\": true,              /* Enables experimental support for ES7 decorators. */\n    // \"emitDecoratorMetadata\": true,               /* Enables experimental support for emitting type metadata for decorators. */\n    /* Advanced Options */\n    \"skipLibCheck\": true /* Skip type checking of declaration files. */,\n    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\n  },\n  \"include\": [\n    \"src/**/*.ts\",\n    \"src/**/*.tsx\",\n    \"src/**/*.vue\",\n    \"tests/**/*.ts\",\n    \"tests/**/*.tsx\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n关于Vue文件的定义问题，从vue-cli创建的定义文件，复制一份过来就行了\n\n```javascript\n/* eslint-disable */\ndeclare module '*.vue' {\n  import type { DefineComponent } from 'vue'\n  const component: DefineComponent<{}, {}, any>\n  export default component\n}\n```\n\n关于ts标签报错,需要在ts-loader里进行配置,让他解析vue文件`appendTsSuffixTo: [/\\.vue$/]`\n\n```\nmodule.exports = {\n  entry: \"./index.vue\",\n  output: { filename: \"bundle.js\" },\n  resolve: {\n    extensions: [\".ts\", \".vue\"]\n  },\n  module: {\n    rules: [\n      { test: /\\.vue$/, loader: \"vue-loader\" },\n      {\n        test: /\\.ts$/,\n        loader: \"ts-loader\",\n        options: { appendTsSuffixTo: [/\\.vue$/] }\n      }\n    ]\n  }\n};\n```\n\n还有一个是vue devtool chrome调试工具 不亮的问题,下载新的beta版问题就解决了.\n\n### 2.处理html文件\n\n这是个帮助你生成html文件的插件，最后产物是一个html模板导入你打包完的js\n\n```powershell\nnpm install html-webpack-plugin -D\n```\n\n先在src下面创建一个index.html.里面是你生成html文件用的模板\n\n修改webpack配置\n\n```javascript\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    // ...\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            filename: 'index.html',\n            title: 'Vue3 + TS -> Web App'\n        })\n    ]\n}\n```\n\n比如我们用vscode自动生成一个html模板,title里面用`<%= htmlWebpackPlugin.options.title %>`就可以调用webpack里面html插件定义的变量title。\n\n我们直接抄vue-cli的模板,吧index.html放到public文件夹里面。然后webpack里面html插件的入口也改成`./public/index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body>\n    <noscript>\n      <strong\n        >We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work\n        properly without JavaScript enabled. Please enable it to\n        continue.</strong\n      >\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n```\n\n他最后生成的html文件是如下\n\n```html\n<!DOCTYPE html>\n<html lang=\"\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue3 + TS -> Web App</title>\n  <script defer src=\"index.js\"></script></head>\n  <body>\n    <noscript>\n      <strong\n        >We're sorry but Vue3 + TS -> Web App doesn't work\n        properly without JavaScript enabled. Please enable it to\n        continue.</strong\n      >\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n```\n\n### 3.处理样式\n\nwebpack默认只能处理js文件，所以html，css这些都要相应的loader来处理\n\n安装依赖\n\n```powershell\nnpm install style-loader css-loader sass sass-loader -D\n```\n\n其中css-loader是处理css之间的依赖关系的，加载 CSS 文件并解析 import 的 CSS 文件，最终返回 CSS 代码\n\n而style-loader是将模块导出的内容作为样式并添加到 DOM 中\n\nsass 和sass-loader处理sass\n\n修改webpack配置如下,这样样式就能引入到js了。\n\n```javascript\nconst path = require('path');\n\nmodule.exports = {\n    // ...\n    module: {\n        rules: [\n            // ...\n            {\n                test: /\\.css$/,\n                use: [\n                    'style-loader',\n                    'css-loader'\n                ]\n            },\n            {\n                test: /\\.s[ac]ss$/,\n                use: [\n                    'style-loader',\n                    'css-loader',\n                    'sass-loader'\n                ]\n            }\n        ]\n    }\n}\n\n```\n\n### 4.处理图片等静态资源（asset module）\n\n资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。\n\nwebpack 5 版本之前我们通常使用\n\n- [`raw-loader`](https://webpack.docschina.org/loaders/raw-loader/) 将文件导入为字符串\n- [`url-loader`](https://webpack.docschina.org/loaders/url-loader/) 将文件作为 data URI 内联到 bundle 中\n- [`file-loader`](https://webpack.docschina.org/loaders/file-loader/) 将文件发送到输出目录\n\n资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：\n\n- `asset/resource` 发送一个单独的文件并导出 URL。之前通过使用 `file-loader` 实现。\n- `asset/inline` 导出一个资源的 data URI。之前通过使用 `url-loader` 实现。\n- `asset/source` 导出资源的源代码。之前通过使用 `raw-loader` 实现。\n- `asset` 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 `url-loader`，并且配置资源体积限制实现。\n\n如果你想和以前的url-loader之类的兼容，可以添加一行`javascript/auto`来解决\n\n```javascript\n\nmodule.exports = {\n  module: {\n   rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 8192,\n            }\n          },\n        ],\n       type: 'javascript/auto'\n      },\n   ]\n  },\n}\n```\n\n如果向停止asset loader对新url的处理添加下面的一行\n\n```\n  dependency: { not: ['url'] },\n```\n\n\n\n这里我们就整一个比较通用的设置，那就是设置一个限制大小，小于这个大小的资源会被内联，大于这个大小的资源是采用引用的方式，直接把文件移动过去。\n\n我们添加的配置如下,其中webpack5 默认内联资源的分界线是8kb\n\n```javascript\nconst path = require('path');\n\nmodule.exports = {\n//...\n  module: {\n    rules: [\n      {\n        test: /\\.(jpg|png|jpeg|gif|bmp|mp4|ogg|mp3|wav)$/,\n        type: 'asset',\n          parser: {\n              dataUrlCondition: {\n                  maxSize: 8 * 1024 // 8kb\n              }\n          }\n      }\n        //...\n    ]\n  },\n};\n\n```\n\n### 5.配置开发服务器\n\n有了开发服务器调试项目就会更方便，项目在代码改变后可以自动重新构建。\n\n```powershell\nnpm install webpack-dev-server -D\n```\n\nwebpack配置修改\n\n```javascript\nmodule.exports = {\n    // ...\n    devServer: {\n        port: 3000,\n        hot: true,\n        open: true,\n        contentBase: '../dist'\n    },\n    // ...\n}\n```\n\n之后我们可以在package.json中添加一条命令\n\n```\n    \"start\": \"webpack serve --config ./webpack.config.js\",\n```\n\n在开发环境下，你还要添加sourceMap，sourceMap记录了源代码和编译后代码的映射关系，可以方便我们调试。在编译后的代码出错时，我们能通过sourceMap定位到源文件的错误发生的位置\n\ninline-source-map会将sourceMap转换为dataURL插入到js文件中\n\n```javascript\ndevtool: 'inline-source-map',\n```\n\n\n\n### 6.清理打包文件\n\nwebpack每次打包生成的文件,如果添加了hash,那么就不会覆盖原文件,而是在dist文件夹内保留,我们可以用一个 clean-webpack-plugin插件帮我们在打包前完成清理文件夹的工作,\n\n```shell\nnpm install clean-webpack-plugin -D\n```\n\n配置\n\n```javascript\nconst path = require('path');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\n\nmodule.exports = {\n    // ...\n    plugins: [\n        // ...\n        new CleanWebpackPlugin()\n    ]\n}\n```\n\n\n\n## 03.代码检查和格式化\n\n### 1.配置prettier\n\nprettier是一个好用的代码格式化工具,直接安装,然后配置就完了.\n\n```powershell\nnpm install --save-dev prettier\n```\n\n下面是我常用的最小配置\n\n```javascript\n//.prettierrc.js\nmodule.exports = {\n  semi: false,//行末无分号\n  singleQuote: true,//字符串使用单引号\n}\n```\n\n另外prettier和eslint是会产生冲突的,最典型的是trailing comma的问题,也就是对象和数组结尾的逗号.prettier默认的设置是不支持这个逗号的.而eslint是添加这个逗号的.\n\n后面我们要安装一个兼容的插件,让prettier和eslint不发生冲突\n\n### 2.配置eslint\n\n安装eslint和typescript相关插件\n\n```powershell\nnpm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\n```\n\n\n\nwebpack插件,其实eslint单独就够用了,配合lint-staged,没必要在webpack编译的时候也加上了.纯属降低速度\n\nhttps://webpack.docschina.org/plugins/eslint-webpack-plugin/\n\n加上这个其实主要作用还是在用没有eslint功能的ide写代码的时候.但是vscode有eslint插件所以没必要配置了.\n\n\n\n\n关于eslint也需要配置文件`.eslintrc.js`,可以用`npx eslint --init` 进行创建\n\n因为我要用vue和 standardjs规范,所以实际会安装那么多插件\n\n```\neslint-plugin-vue@latest\n@typescript-eslint/eslint-plugin@latest\neslint-plugin-import@^2.22.1\neslint-plugin-node@^11.1.0\neslint-plugin-promise@^4.2.1 || ^5.0.0\n@typescript-eslint/parser@latest\n```\n\n\n\n生成的配置文件我们再修改一下,如下\n\n```JavaScript\n//.eslintrc.js\nmodule.exports = {\n  env: {\n    browser: true,\n    es2021: true,\n    node: true,\n  },\n  extends: ['plugin:vue/vue3-recommended', 'prettier'],\n  parserOptions: {\n    ecmaVersion: 12,\n    parser: '@typescript-eslint/parser',\n    sourceType: 'module',\n  },\n  plugins: ['vue', '@typescript-eslint'],\n  rules: {},\n}\n```\n\n我们再看一下vue-cli生成的eslint配置,他那边就插件还是挺多的,\n\n他的插件也太多太乱了.\n\n```\n'plugin:vue/vue3-essential',\n'eslint:recommended',\n'@vue/typescript/recommended',\n'@vue/prettier',\n'@vue/prettier/@typescript-eslint',\n```\n\n### 3.兼容eslint和prettier\n\n然后关于配置prettier和eslint的兼容,除了自己手动修改配置文件以外,也可以安装一个插件实现\n\n```undefined\nnpm install --save-dev eslint-config-prettier\n```\n\n只需要在eslint的配置文件extends最后加上\n\n```\n  extends: ['plugin:vue/vue3-recommended', 'prettier'],\n```\n\n### 4.配置stylelint\n\nstylelint可以帮我们检查css代码\n\n```powershell\nnpm install --save-dev stylelint-config-prettier stylelint\n```\n\n创建stylelintrc.js,添加规则,并且添加prettier的兼容\n\n```javascript\nmodule.exports = {\n  extends: [\n    //\n    'stylelint-config-standard',\n    'stylelint-config-prettier',\n  ],\n}\n```\n\n### 5.配置EditorConfig\n\nEditorConfig因为vscode没有原生支持,说实话也没什么配的必要了,要安装一个插件纯属给自己添加麻烦,所以一般情况下也不用配了,vscode设置就够用了.\n\n下面是我写前端代码时的配置\n\n```ini\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n```\n\n### 6.配置git message检查\n\ngit message检查也是一般用不到的,用vscode commit插件就够了\n\n但是lint-staged和husky配一下还是有用的\n\n## 04.优化\n\n我们可以直接抄vue-cli用的一些插件\n\n执行下面这行命令可以查看vue-cli的插件列表\n\n```powershell\nvue inspect --plugins\n```\n\n目前的输出是这样的：\n\n```javascript\n[\n  'vue-loader',\n  'feature-flags',\n  'define',\n  'case-sensitive-paths',\n  'friendly-errors',\n  'html',\n  'preload',\n  'prefetch',\n  'copy',\n  'fork-ts-checker'\n]\n```\n\n其中\n\n- vue-loader是webpack解析vue文件必须的插件\n- feature-flags 是控制发布代码用的一个插件,你可以定义一些flag,在你的代码中判断这些flag决定最终的功能.\n- DefinePlugin 允许在 **编译时** 创建配置的全局常量,这是个webpack自带的插件\n- case-sensitive-paths 这个插件强制模块路径与磁盘上的实际路径匹配,主要是mac系统会有这个问题,所以win和linux不用装这个.\n- friendly-errors 更友好的错误提示\n- html 前面的基础配置里已经装过了\n- preload 预加载js代码\n- prefetch 预加载资源\n- copy  就是复制文件,把已经存在的文件或目录复制到某个目录,比如你写了个项目,要把readme也复制到输出里....\n- fork-ts-checker 在独立进程上运行ts检查.\n\n很明显 DefinePlugin ,friendly-errors,还有fork-ts-checker可以抄一下,比较通用,其他插件需求度倒是没那么高,要用的时候再引入就是了\n\n### 1.更友好的错误提示\n\n```\nnpm install friendly-errors-webpack-plugin --save-dev\n```\n\nhttps://github.com/geowarin/friendly-errors-webpack-plugin\n\n配置\n\n```javascript\nvar FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin');\n\nvar webpackConfig = {\n  // ...\n  plugins: [\n    new FriendlyErrorsWebpackPlugin(),\n  ],\n  // ...\n}\n```\n\n### 2.提升typescript代码检查速度 \n\nhttps://github.com/TypeStrong/fork-ts-checker-webpack-plugin\n\n安装fork-ts-checker-webpack-plugin插件,可以开启一个新进程执行代码检查. 支持typescript和eslint,同时会有更友好的错误提示\n\n```\nnpm install --save-dev fork-ts-checker-webpack-plugin\n```\n\n配置webpack\n\n我们需要再ts-loader里面配置transpileOnly为true,也就是只进行转译,这样代码检查就会交给这个插件进行,如下\n\n```javascript\n// webpack.config.js\nconst ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\n\nmodule.exports = {\n  context: __dirname, // to automatically find tsconfig.json\n  entry: './src/index.ts',\n  resolve: {\n    extensions: [\".ts\", \".tsx\", \".js\"],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        loader: 'ts-loader',\n        exclude: /node_modules/,\n        options: {\n          // disable type checker - we will use it in fork plugin\n          transpileOnly: true\n        }\n      }\n    ]\n  },\n  plugins: [new ForkTsCheckerWebpackPlugin()]\n};\n```\n\n这个插件虽然支持eslint,但是没必要.eslint检查vscode在编码的时候就能执行,而且git提交的时候拦截一下就好了.\n\n\n\n添加webpack的类型提示\n\n```javascript\nnpm install --save-dev @types/webpack\n```\n\n\n\n### 3.分析文件打包大小\n\nwebpack-bundle-analyzer https://github.com/webpack-contrib/webpack-bundle-analyzer\n\n### 4.缩小打包范围\n\nwebpack配置exclude 和include exclude的优先级更高\n\n### 5.缓存\n\nbabel-loader可以配置缓存,ts-loader也有实验性的缓存选项.\n\ncache-loader 插件可以实现各种loader的缓存,只推荐对性能较大的loader使用,因为缓存文件是在磁盘上的,保存和读取这些缓存也会有时间开销\n\nhttps://github.com/webpack-contrib/cache-loader\n\n```powershell\nnpm install --save-dev cache-loader\n```\n\n配置\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.ext$/,\n        use: ['cache-loader', ...loaders],\n        include: path.resolve('src'),\n      },\n    ],\n  },\n};\n\n```\n\n\n\n### 7.设置环境变量\n\n我们可以用NODE_ENV环境变量指定webpack的工作模式。\n\n也可以直接命令中指定环境变量。\n\n但是有一个问题是windows环境下和linux环境下指定环境变量的方式存在差异\n\n我们可以用`cross-env`设置环境变量来消除这一差异\n\n```powershell\nnpm install cross-env -D\n```\n\n在package.json中添加\n\n```javascript\n{\n    // ...\n    \"scripts\": {\n        \"webpack\": \"cross-env NODE_ENV=development webpack\"\n    }\n    // ...\n}\n```\n\n### 8.分环境打包\n\n项目开发中一般会分为开发环境，测试环境和生产环境。\n\n生产环境我们一般会对代码进行各种压缩，减少打包的体积。\n\n#### 打包压缩\n\n##### 压缩html文件\n\n我们只需要配置html-webpack-plugin\n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n    // ...\n    plugins: [\n        new HtmlWebpackPlugin({\n            // ...\n+            minify: {\n+                collapseWhitespace: true, // 去掉空格\n+                removeComments: true // 去掉注释\n+            }\n        }),\n        // ...\n    ]\n}\n```\n\n##### 压缩css文件\n\nMiniCssExtractPlugin 可以提取css文件到单个文件里面\n\ncss-minimizer-webpack-plugin 则是提供css压缩的功能\n\npurgecss-webpack-plugin\n\n因为还要分文件，还要用webpack merge，整体的配置实在太麻烦了，所以先了解到这里。"}},"__N_SSG":true}