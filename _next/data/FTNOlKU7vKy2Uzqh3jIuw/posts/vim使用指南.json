{"pageProps":{"postData":{"id":"vim使用指南","title":"vim使用指南","lastUpdated":1618646092,"content":"# vim使用指南\n\n下面主要是针对vscode-vim的使用指南，1-9节的内容是通用的，但是后面的内容是vscode-vim特有的功能。\n\n## 01.最基本操作\n  vim有三种模式：\n  1. 按`ESC`进入正常模式（normal）\n  2. 在正常模式下按i，进入插入模式（insert）\n  3. 在正常模式下按`:`键进入命令模式\n\n  三个模式里面只有插入模式是用于输入文本的,正常模式是用于编辑文本的，包括移动光标，复制粘贴删除等\n  命令模式可以用来执行搜索，批量替换等\n\n在正常模式下，移动光标可以用以下几个字幕或者方向键\n\n```\n           ↑\n     ← h j k l →\n         ↓\n```\n\n在插入模式下，按 `<ESC>`, `<CTRL-[>` or `<CTRL-C>` 返回正常模式\n\n### 在vim中打开文件\n\n- `:e <filename>` 打开名为 filename 的文件，若文件不存在则创建之\n- `:Ex` 在 Vim 中打开目录树，光标选中后回车打开对应文件（提示：`-` 进入上级目录）\n\n### 显示buffer列表\n\n你可以用 `:buffers` 或 `:ls` 命令查看\n\n> - `:bn` 打开缓存中下一个文件\n> - `:bp` 打开缓存中上一个文件\n> - `:b<N>` 打开缓存中第 N 个文件\n> - 你也可以使用 `:bdelete<N>` 来删除所要关闭的缓冲区，缩写 `:bd<N>`。\n\n### 保存文件\n\n- `:w` 保存当前文件\n\n- `:wa` 保存全部文件\n\n- `:wq` or `ZZ` 保存并退出,或者`:x`也是保存并退出\n\n- `:q!` or `ZQ` 强制退出，不保存\n\n- `:saveas <new filename>` 文件另存为\n\n- `:w <new filename>` 文件另存一份名为 `<new filename>` 的副本并继续编辑原文件\n\n  \n\n### 简单设置vim\n\n“工欲善其事，必先利其器”。尽管 Vim 非常强大，但默认配置的 Vim 看起来还是比较朴素的，为了适合\n我们的开发需求，要对 Vim 进行一些简单的配置。\n\n- `:set number` 显示行号\n- `:set relativenumber` 显示相对行号（这个非常重要，慢慢体会）\n- `:set hlsearch` 搜索结果高亮\n- `:set autoindent` 自动缩进\n- `:set smartindent` 智能缩进\n- `:set tabstop=4` 设置 tab 制表符所占宽度为 4\n- `:set softtabstop=4` 设置按 `tab` 时缩进的宽度为 4\n- `:set shiftwidth=4` 设置自动缩进宽度为 4\n- `:set expandtab` 缩进时将 tab 制表符转换为空格\n- `:filetype on` 开启文件类型检测\n- `:syntax on` 开启语法高亮\n\n这里列出的是命令，你可以通过在 Vim 中输入进行设置，但这种方式设置的参数只在本次关闭 Vim 前生效，\n如果你退出 Vim 再打开，之前的设置就失效了。\n\n若要永久生效，需要修改 Vim 的一个自动配置文件，一般文件路径是 `/home/<user>/.vimrc`（Linux\n系统）或 `/Users/<user>/.vimrc`（Mac OS 系统）\n\n如果没有就新建一个，以 Mac OS 系统为例：\n\n> 在控制台执行如下命令，每行结尾记得回车\n\n```bash\ncd ~\nvim .vimrc\n```\n\n> 现在你已经在 Vim 中打开了你的 Vim 专属配置文件，将上面提到的配置复制到你的文件中，记得要删除\n> 每行开头的 `:`\n>\n> 修改完成执行 `:wq` 或者 `ZZ` 保存退出，再次进入 Vim 时，你的这些配置就已经生效了\n>\n> 当然，机智如我也为你准备好了一份 [vimrc](vimrc.vim) 样本文件，你可以在控制台执行\n> `cp vimrc.vim ~/.vimrc` 直接使用，再次启动 Vim 或在 Vim 中执行  `:source ~/.vimrc`你的配置就\n> 应该生效了。\n\n_**[ AD ]** 当然你也可以在我维护的另外一个项目 [The 7th Vim](https://github.com/dofy/7th-vim) 中找到一个更为完整的配置方案。_\n\n#### 清除搜索高亮\n\n前面提到的配置中，有一项是高亮全部搜索结果 `:set hlsearch`，其作用是当你执行 `/`\n、`?`、`*` 或 `#` 搜索后高亮所有匹配结果。\n\n> 如果你已经设置了这个选项，尝试执行 `/set`\n\n看到效果了吧，搜索结果一目了然，但这有时候也是一种困扰，因为知道搜索结果后高亮就没用了，但高亮\n本人并不这样认为，它会一直高亮下去，直到你用 `:set nohlsearch` 将其关闭。\n\n但这样需要就打开，不需要就关闭也不是个办法，有没有更好的解决方案呢？当然！请看下面的终极答案：\n\n> **再搜一个不存在的字符串**\n\n通常我用来清除搜索高亮的命令是 `/lfw`，一是因为 `lfw` 这个组合一般不会出现（不适用于\n本文档...），二是这三个字母的组合按起来比较舒服，手指基本不需要怎么移动（你感受一下）。\n\n#### 重复上一次命令\n\nVim 有一个特殊的命令 `.`，你可以用它重复执行上一个命令。\n\n#### 缩进\n\n- `>>` 向右缩进当前行\n- `<<` 向左缩进当前行\n\n#### 自动排版\n\n- `==` 自动排版当前行\n- `gg=G` 当前文档全文自动排版\n- `<N>==` 对从当前行开始的 N 行进行自动排版\n- `=<N>j` 对当前行以及向下 N 行进行自动排版\n- `=<N>k` 对当前行以及向上 N 行进行自动排版\n\n### 窗口分屏\n\n工作中经常会遇到这种情况，就是需要参照其他文档编辑当前文档（场景：翻译），或者从另外一个文档\ncopy 代码到当前文档（场景：复制 html 元素类名到 css 文档），这时候就是你最需要分屏的时候。\n\n#### 分屏方式\n\n- `:split` 缩写 `:sp` or `Ctrl-w s` 上下分屏\n- `:vsplit` 缩写 `:vs` or `Ctrl-w v` 左右分屏\n- `:diffsplit` 缩写 `:diffs` diff 模式打开一个分屏，后面可以加上 {filename}\n\n#### 窗口跳转\n\n- `Ctrl-w w` 激活下一个窗口\n- `Ctrl-w j` 激活下方窗口\n- `Ctrl-w k` 激活上方窗口\n- `Ctrl-w h` 激活左侧窗口\n- `Ctrl-w l` 激活右侧窗口\n\n#### 移动分屏\n\n- `Ctrl-w L` 移动到最右侧\n- `Ctrl-w H` 移动到最左侧\n- `Ctrl-w K` 移动到顶部\n- `Ctrl-w J` 移动到底部\n\n_注意：区分大小写。另外，可以将底部的屏幕移动到右侧，实现上下分屏到左右分屏的转换。_\n\n#### 屏幕缩放\n\n- `Ctrl-w =` 平均窗口尺寸\n- `Ctrl-w +` 增加高度\n- `Ctrl-w -` 缩减高度\n- `Ctrl-w _` 最大高度\n- `Ctrl-w >` 增加宽度\n- `Ctrl-w <` 缩减宽度\n- `Ctrl-w |` 最大宽度\n\n#### 标签页\n\n#### 创建标签页\n\n- `:tabnew` or `:tabedit` 缩写 `:tabe` 打开新标签页\n- `Ctrl-w gf` 在新标签页中打开当前光标所在位置的文件名\n\n_注意：`:tabnew` 和 `:tabedit` 后面都可以跟一个 <空格><文件名> 用以在新标签页中\n打开指定文件，还可以在 `:` 后面加一个数字，指出新标签页在列表中的位置（从 0 开始）。_\n\n#### 切换标签页\n\n- `gt` or `:tabnext` 缩写 `:tabn` 下一个标签页（最后一个会循环到第一个）\n- `gT` or `:tabprevious` 缩写 `:tabp` 上一个标签页（第一个会循环到最后一个）\n- `:tabrewind` 缩写 `:tabr` or `:tabfirst` 缩写 `:tabfir` 到第一个\n- `:tablast` 缩写 `:tabl` 到最后一个标签页\n\n#### 关闭标签页\n\n- `:tabclose` 缩写 `:tabc` 关闭当前标签页\n- `:-tabc` 关闭上一个标签页\n- `:+tabc` 关闭下一个标签页\n- `:tabonly` 缩写 `:tabo` 关闭其他标签\n\n## 02.更快地移动光标 motion\n\n### `w` ,`b `,`W`,` B`,` e`,` g`,`e` 以单词为间隔移动光标\n\n* w是后移\n* b是向前\n* W是后移包含符号的单词\n* B是前移包含符号的单词\n* e 移动到单词的尾部\n* ge 移动到上一个单词的尾部\n\nw和W的区别是word和words的区别，word只包括`a-zA-Z0-9`，words还包含空字符，空格，EOL等\n\n### 使用查找来跳转\n\n- `f `移动到本行下一个特定的字母和符号，`F `移动到本行前一个特定的字母\n- 你也可以使用`t`和`T`，他的光标在搜索的字母之前\n\n当你使用了`f{character}`之后，你可以用`;`向后重复查找，或者使用`,`向前重复查找\n\n* `f`   在同一行向后搜索第一个匹配\n\n* `F`   在同一行向前搜索第一个匹配\n\n* `t`   在同一行向后搜索第一个匹配，并停在匹配前\n\n* `T`   在同一行向前搜索第一个匹配，并停在匹配前\n\n* `;`   在同一行重复最近一次搜索\n\n* `,`   在同一行向相反方向重复最近一次搜索\n\n  \n\n  \n\n* `/{pattern}` 向下搜索\n\n* `?{pattern}` 向上搜索\n\n* `*`向后查找当前光标所在的单词\n\n* `#`向前查找当前光标所在的单词\n\n  输入上面的按回车就进入搜索模式，可以用`n`（向下）和`N`在搜索到的词之间移动\n\n  注意n的方向性和你之前查找的方向是一致的\n\n  查找会高亮词汇,`:nohl`命令可以取消高亮\n\n### 匹配查找\n\nVim 中可以使用 `%` 对 `(` 和 `)`，`[` 和 `]`，`{` 和 `}` 进行匹配查找，当光标位于其中一个\n符号上时，按下 `%`，光标会跳到与之匹配的另外一个符号上\n\n### `0` `^` `$` `g_` 移动到行末或行尾\n\n* `0 `移动到这行的最开头字母\n* `^` 移动到本行最开头的非空字母\n* `$` 移动到本行最尾部\n* `g_`移动到本行最尾部的非空字母\n* `n|`跳转到本行第n列\n\n### `｛` `｝` `(` `)`以句子或段落为间隔移动\n\n- `(`   跳到前一个句子\n- `)`   跳到下一个句子\n- `{  ` 跳转到上一个段落\n- `}`  跳转到下一个段落\n\n\n\n### 滚动页面，翻页 CTRL+D  CTRL+U\n\n- `Ctrl-y`    向上滚动一行\n- `Ctrl-e`    向下滚动一行\n- `Ctrl-u`    向上滚动半屏\n- `Ctrl-d`    向下滚动半屏\n- `Ctrl-b`    向上滚动一屏\n- `Ctrl-f`    向下滚动一屏\n\n也可以相对于当前行进行滚动\n\n- `zt `   将当前行置于屏幕顶部附近\n- `zz`   将当前行置于屏幕中央\n- `zb`    将当前行置于屏幕底部\n\n\n\n\n\n### 按照数字移动\n\n数字在通常模式里，可以重复执行一个命令多次。\n\n{count}{command}\n\n比如`2w`就是向下移动两个单词\n\n`5j`，就是向下移动5行\n\n`2/count`就是跳转到第二个搜索到的count位置\n\n### 使用命令跳转\n\n* `:<line number>`跳转到第几行 ，相当于` <line number>gg` \n* `:+<line number>`向下跳转几行 ，相当于` <line number>j`\n* `:-<line number>`向上跳转到第几行 ，相当于` <line number>k`  \n\n### `gd`跳转到定义，`gf`跳转到文件名所指向的文件\n\n\n\n### `｛line｝gg` 跳转到指定行\n\n* `gg` 跳转到文件开头\n* `G` 跳转到文件结尾\n* `｛line｝gg` 跳转到文件指定行，或者也可以用`{line}G`\n* `%`，跳转到 匹配括号的开始和结尾`({[]})`\n* `n%`,文件百分比跳转\n\n### `m`标记位置\n\n比如`ma`就是用a标签标记一个位置，你之后就可以用``a`来跳转到你标记的a位置\n\n其中\n\n- ``a`是精确回到a标签的位置(行和列)\n- `'a`    跳转到a标签的行\n\n语法是 \n\n```\nm{a-zA-Z}\n```\n\n其中小写字母是局部标签，大写字母是全局标签\n\n使用`:marks`查看所有标签\n\n### 窗格间跳转\n\n- `H`   跳转到屏幕的顶部\n- `M`   跳转到屏幕的中间\n- `L`   跳转到屏幕的底部\n- `nH`  跳转到距离顶部n行的位置\n- `nL`  跳转到距离底部n行的位置\n\n### 代码跳转\n\n- `ctrl+]`跳转到函数或者变量定义处\n- `ctrl+o`或`ctrl+T`返回跳转前位置\n- `gi`跳转到之前离开normal模式的位置(也就是上次编辑的位置了)\n- `gI`跳转到之前离开normal模式的那一行开头并进入normal模式\n- `gd` 跳转到函数或者变量定义处\n- `gf` 跳转到文件\n\n## 03.编辑相关操作\n\n关于编辑操作的语法是这样的\n\n```\n{operator}{count}{motion}\n```\n\n* operator是具体的操作，比如delete，change，\n* count 是操作执行的次数\n* motion是操作执行的位置\n\n举个例子,`d2w`是向下删除两个单词\n\n\n\n这些操作可以用一些英语首字母帮助记忆\n\n> - d for delete\n> - f for find\n> - c for change\n> - t for until\n\n\n\n### `d` 剪切（删除）操作\n\n`d`其实是剪切的功能，只不过剪切之后不粘贴回去相当于删除。\n\n* 删除当前行 `dd`\n* `dw`删除下一个单词\n* `ggdG`删除整个文件，拆解一下就好理解，gg跳到文件开头，然后执行删除，删到文件末尾。\n* `D`删除当前行光标之后的内容，等价于`d$`\n\n- `s` 删除当前字符，并进入 `INSERT` 模式\n- `S` 删除当前行并保存到 Vim 剪贴板，同时进入 `INSERT` 模式（等同于 `cc`）\n- `x` 删除当前字符，相当于 insert 模式下的 `Delete`\n- `X` 删除前一个字符，相当于 insert 模式下的 `Backspace\n- `cc` 删除当前行并保存到 Vim 剪贴板，同时进入 `INSERT` 模式\n- `c<X>` 删除指定内容并保存到 Vim 剪贴板，同时进入 `INSERT` 模\n\n### `u` 撤销前一步操作 `CTRL+R`重做前一步\n\n- `U`撤销所有操作，使文件回到原样\n- 在插入模式下可以使用 `Ctrl-G u` 会生成一个断点，之后你就可以用u还原到这个断点\n-  `:wundo` 保存一份撤销历史记录，它会创建一个**.undo**文件，里面存放的是你的历史记录。这样当你打开一个新文件的时候，可以通过 `:rundo` 来加载 undo 历史。\n- Vim 可以通过变量 `undolevels` 来选择最多可执行 undo 的次数。你可以通过 `:echo &undolevels` 来查看当前的配置。\n\n时间旅行\n\n你可以使用 `:undolist` 去查看之前所做的修改。 `:earlier` 可以加上分钟 (`m`), 小时 (`h`), and 天 (`d`) 作为参数。\n\n```\n:earlier 10s    恢复到10秒前的状态\n:earlier 10m    恢复到10分钟前的状态\n:earlier 10h    恢复到10小时前的状态\n:earlier 10d    恢复到10天前的状态\n```\n\n### `c` 删除并进入插入模式\n\n* `cc`删除一整行并进入插入模式\n* `C`删除本行光标后的内容并进入插入模式\n* `cw`删除下一个单词并进入插入模式\n\n### `.` 重复上次产生改变的操作\n\n以下几种类型会被视为一个可以重复的改变\n\n- `d{motion}` \n\n- `i{typeSomething}<ESC>` \n\n-  `c{typeSomething}<ESC>` \n\n  \n\n使用c带来的可重复性比d会高很多\n\n举个例子,当我们想修改下面这句话的`courteously`为`polite`,我们移动到单词开头执行`cwpoliteESC`，就可以完成替换的工作，然后我们就可以用`.`操作符重复这个替换操作\n\n```javascript\nconst courteousSalute = \"I courteously salute you good person.\"\n```\n\n效率更高的是我们搜索和操作符，这样省去了我们移动光标找单词的时间\n\n### 合并\n\n- `J` 将当前行与下一行合并\n\n### 替换操作\n\n- `r<X>` 将当前字符替换为 X\n- `gu<X>` 将指定的文本转换为小写\n- `gU<X>` 将指定的文本转换为大写\n- `:%s/<search>/<replace>/` 查找 search 内容并替换为 replace 内容\n- `g~<X>`，小写变成大写，大写变成小写。\n\n### 文本对象\n\n文本对象就是结构化的文本，它描述一个文档中的单词，句子，段落，被引号的文本，html的tags等，你可以用这个和操作符结合来改变一个单词，句子，段落等等\n\n```\n            |- `a` means around\n            |- `i` means inner\n           /\n          /\n         /\n        {a|i}{text-object}\n                  /\n                 /\n                | w - word\n                | s - sentence\n                | p - paragraph\n                | \" - quotes\n                | t - html tags\n```\n\n和操作符结合就是这样：\n\n```\n{operator}{a|i}{text-object}\n```\n\n举个例子，假设你要修改下面的字符串，只要`fR`移动到R字母，然后执行`ci\"`,就可以输入你想输入的内容了。也就是修改引号内的内容。\n\n```\nconst poem = \"Roses are red\";\n```\n\n实际上上述操作还可以优化，因为文本对象，是自动应用的和你光标的位置无关，所以第一步的移动操作不需要。所以这个操作的可重复性，会比单纯的c要高。\n\n`\"`,`''`,和反引号操作符比较特殊，一般的wsp只有光标在文本对象上才会自动查找，而引号在同一行的前面和后面都没问题。\n\n\n\n关于around的作用是，用a代替i会影响到分隔符和空格比如引号，大括号，小括号作为文本对象的时候会把分隔符和空格一起删除，而用i不会删除分割符和空格\n\n\n\n### 其他操作\n\n* `y` （yank）复制\n  * yy 复制一行，和d，c这些键的逻辑是一样的\n  * Y 复制光标到行尾的内容\n* `p` (put)粘贴\n- `g~` (switch case): 把字母从小写变成大写\n* `>` (shift right): 添加缩进\n* `<` (shift left): 移除缩进\n* `=` (format code): 格式化代码\n\n\n\n### 更多简写\n\n- `x` 相当于 `dl`  删除光标下的字母\n- `X` 相当于 to `dh` 删除光标前的字母\n- `s` 相当于 `ch`, deletes 删除光标前的字母并且进入插入模式\n- `r` 将一个字母替换为另一个\n- `~`切换一个字母的大小写\n\nA nice way use case for `x` is to swap a couple of characters when you make a typo. You remove (and cut) a character with `x` and immediately paste it after the cursor with `p`. Try it!\n\n\n\n## 04.输入模式操作(insert)\n\n### `i`,`a`,`I`,`A`四种插入：\n\n- `i` 插入到光标所在字母\n- `a` 插入到光标后\n- `I` 插入到行首\n- `A` 插入到行尾\n\n### `o` ,`O`开启新一行\n\n* `o`  在当前行下方开新行\n* `O`   在当前行上方开新行\n\n\n\n#### `gi` 回到上次离开插入模式的地方开始输入\n\n我们发现g这个字母，通常用作其他操作的修饰符，比如e和ge，e是到单词的结尾，ge是到上一个单词结尾。\n\n还有一些命令\n\n- `s` 删除当前光标位置的字符并开始输入文本\n- `S`    删除当前行并开始输入文本\n- `gI`   在当前行的第一列的位置开始输入文本\n\n\n\n### 插入模式的删除快捷键\n\n这个快捷键小写也是生效的\n\n- `CTRL-H` 删除上次输入的字符并向左移动光标\n- `CTRL-W`  清楚上一个word\n- `CTRL-U`  删除上次输入的行\n\n### 退出插入模式\n\n- `<ESC>`\n- `CTRL-C`\n- `CTRL-[`\n\n很多vim用户会习惯会在输入模式中把`ESC`映射到`jj`或者`jk`\n\n### 重复输入模式\n\n在进入输入模式之前传递一个数字参数，比如\n\n```\n10i\n```\n\n你输入的文本将被重复10次。这个方法对任意一种进入输入模式的方式都有效\n\n### 在输入模式中使用寄存器\n\n举例：`Ctrl-r a`\n\n```\nCtrl-r {register}\n```\n\n### 在输入模式下执行普通模式的命令\n\n在输入模式下， 如果你按下`Ctrl-o`，你就会进入到`insert-normal`（输入-普通）子模式。如果你关注一下左下角的模式指示器，通常你将看到`-- INSERT --` ，但是按下`Ctrl-o`后就会变为`-- (insert) --`。 在这一模式下，你可以执行一条普通模式的命令，比如你可以做以下这些事：\n\n**设置居中以及跳转**\n\n```\nCtrl-o zz       居中窗口\nCtrl-o H/M/L    跳转到窗口的顶部/中部/底部\nCtrl-o 'a       跳转到标志'a处\n```\n\n**重复文本**\n\n```\nCtrl-o 100ihello    输入 \"hello\" 100 次\n```\n\n**执行终端命令**\n\n```\nCtrl-o !! curl https://google.com    运行curl命令\nCtrl-o !! pwd                        运行pwd命令\n```\n\n**快速删除**\n\n```\nCtrl-o dtz    从当前位置开始删除文本，直到遇到字母\"z\"\nCtrl-o D      从当前位置开始删除文本，直到行末\n```\n\n## 05.视觉模式选中文本(visual mode)\n\n- `v`  字母长度的选择\n- `V`  选择行\n- `Ctrl-V` 块选择模式\n\n\n\n选择的语法如下\n\n```\nget into Visual Mode\n    /\n   /                  action to apply\n  /                         /\n---------                  /\n{v|V|C-V}{count}{motion}{operator}\n         ---------------\n           /\n          /\n   bit of text over which\n   to apply an action\n```\n\n在视觉模式中，可以用 `o`或`O`切换光标的位置\n\n### `ctrl+v`块选择模式\n\n块选择模式比较特殊，适合批量在前方或尾部插入的场景。\n\n如果需要在每行末尾添加分号：\n\n```\nconst one = \"one\"\nconst two = \"two\"\nconst three = \"three\"\n```\n\n将光标放在第一行上： -运行逐块可视模式，并向下两行(`Ctrl-V jj`)。 -高亮显示到行尾(`$`)。 -附加(`A`) ，然后键入\";\"。 -退出可视模式(`esc`)。\n\n\n\n总体来说在视觉模式下的操作会更加直观，相比于normal模式能清晰地看到自己想要编辑的区域。\n\nVim有`Ctrl-X`和`Ctrl-A`命令来减少和增加数字。与可视模式一起使用时，可以跨多行递增数字。\n\n```\n`<    转到上一个可视模式高亮显示的最后一个位置\n`>    转到上一个可视模式高亮显示的第一位\n```\n\n您也可以从插入模式进入可视模式。在插入模式下进入字符可视模式：\n\n```\nCtrl-O v\n```\n\n### 常用操作\n\n* `ggvG`全选  \n\n\n\n## 06.更迅速地执行搜索操作\n\n之前我们已经学到了用`/`进入搜索，按下回车后，可以用`n`在搜索的关键词之间移动。此时我们可以执行一个修改操作，然后n到下一个用`.`操作复现。下面有一种更便捷的方式\n\n### `gn`  选中下一个搜索块\n\n有了gn以后，我们就不需要按一下n在复现删除\n\n我们直接搜索，然后gn选中第一个搜索关键词，在删除，之后用`.`就可以复现选择关键词然后删除的操作。\n\n可以dgn也可以gnd，效果是一样的，然后 `4.`可以重复这个操作4词\n\n## 07.复制和粘贴\n\n* `y`复制\n\n* `p`和`P`分别是向下拷贝和向上拷贝\n\n`gp` 和 `gP`粘贴的时候光标位置不同，光标会在粘贴的内容往后一个字符的位置，也就是会包含换行符\n\n\n\n`d`，`c`和`p`实现剪切和粘贴\n\n\n\n### vim寄存器 Vim Registers\n\n-  **unnamed register** `\"` 是拷贝或者剪切的内容不指定寄存器时默认存放的位置\n- **named registers** `a-z` ，命名寄存器，你可以为接下来剪切或者复制的内容指定特定的a-z的字符的寄存器\n- **yank register** `0` 存储了你上次复制的东西\n- **cut registers** `1-9` 存储了你之前9次剪切操作的内容，包括d和c操作\n\n举个例子 `\"ayas`会复制一个句子，然后存储在寄存器`a`，也就是说语法是`\"{register}`后面跟你的复制剪切操作就会把东西存到指定的寄存器里，当你想粘贴的时候，`\"ap`,也是同样的\n\n使用寄存器的大写字母，表示继续往那个寄存器添加复制或剪切的内容。\n\n\n\n### 查看寄存器的内容\n\n`:reg`命令可以查看你的所有寄存器，是`:register`的缩写   ，你也可以查看指定寄存器的内容`:reg {register}`\n\n### 更多寄存器相关的内容\n\n实际上vim一共有下面10种寄存器\n\n1. 匿名寄存器（`\"\"`）\n2. 编号寄存器(`\"0-9`).\n3. 小删除寄存器 (`\"-`).\n4. 命名寄存器 (`\"a-z`).\n5. 只读寄存器 (`\":`, `\".`,and `\"%`).\n6. Buffer交替文件寄存器 (`\"#`).\n7. 表达式寄存器 (`\"=`).\n8. 选取和拖放寄存器(`\"*` and `\"+`).\n9. 黑洞寄存器 (`\"_`).\n10. 搜索模式寄存器 (`\"/`).\n\n**匿名寄存器**\n\n匿名寄存器默认存储着你最近一次复制，修改或删除的文本。直接使用`p`，就是粘贴匿名寄存器的内容。相当于`\"\"p`\n\n**编号寄存器**\n\n编号寄存器1-9是自动以升序来填充的，也就是说存放你的上9次剪切操作，`0`标号的寄存器只会存上次复制的内容\n\n**小删除寄存器**\n\n不足一行的修改或者删除都不会被存储在0-9号编号寄存器中，而是会被存储在小删除寄存器 (`\"-`)中。\n**命名寄存器 (`\"a-z`)**\n\n命名寄存器是Vim中用法最丰富的寄存器。a-z命名寄存器可以存储复制的，修改的和被删除的文本。不像之前介绍的3种寄存器一样，它们会自动将文本存储到寄存器中，你需要显式地告诉Vim你要使用命名寄存器，你拥有完整的控制权。\n\n**只读寄存器(\":, \"., \"%)**\n\n- `·`    存储上一个输入的文本\n- `:    `  存储上一次执行的命令\n- `%`    存储当前文件的文件名\n\n**Buffer交替文件寄存器 (\"#)**\n\n在Vim中，`#`通常代表交替文件。交替文件指的是你上一个打开的文件，想要插入交替文件的名字的话，可以使用命令`\"#p`。\n\n**表达式寄存器 (`\"=`)**\n\nVim有一个表达式寄存器，`\"=`,用于计算表达式的结果。表达式是Vim中非常宏大的一个话题，所以我只会在这里介绍一些基础知识，我将会在之后的章节中进一步讲解更多关于表达式的细节。\n\n你可以使用以下命令计算数学表达式`1+1`的值：\n\n```\n\"=1+1<Enter>p\n```\n\n在这里，你在告诉Vim你正在使用表达式寄存器`\"=`，你的表达式是（`1+1`），你还需要输入`p`来的到结果。正如之前所提到的，你也可以在输入模式中访问寄存器。想要在输入模式中计算数学表达式的值，你可以使用：\n\n```\nCtrl-r =1+1\n```\n\n你可以使用`@`来从任何寄存器中获取表达式并用表达式寄存器计算其值。如果你希望从寄存器\"a\"中获取文本：\n\n```\n\"=@a\n```\n\n之后输入`<enter>`，再输入`p`。类似地，想在输入模式中得到寄存器\"a\"中的值可以使用：\n\n```\nCtrl-r =@a\n```\n\n你也能使用表达式寄存器来计算Vim脚本的值。如果你使用`:let i = 1`定义一个变量`i`,你可以用`\"=i`获取到它的值，按下回车，再按下`p`。想在输入模式中获取到这个值的话可以运行命令`Ctrl-r=i`。\n\n假设你有一个方程：\n\n```\nfunction! HelloFunc()\n\treturn \"Hello Vim Script!\"\nendfunction\n```\n\n你可以通过调用这个方程获取它的值。想要在普通模式中调用这个方程，你可以使用：`\"=HelloFunc()`, 按下回车再按下`p`。而在输入模式下可以使用`Ctrl-r =HelloFunc()`。\n\n**选取和拖放寄存器 (`\"*`, `\"+`)**\n\n当你向从外部程序复制粘贴一些文本到vim中是，可以使用这两个寄存器，但是你的vim需要开启`+clipboard`才有用\n\n如果你觉得这个操作比较麻烦，你也可以配置vim使得只用p也能粘贴外部程序复制的文本，在vimrc中加入下面一行就可以了：\n\n```\nset clipboard=unnamed\n```\n\n这样你从外部程序中复制文本时，就可以使用匿名寄存器p来进行粘贴\n\n**黑洞寄存器 (`\"_`)**\n\n如果你删除和修改文本的时候，不希望这次修改的内容被存到寄存器里，可以用黑洞寄存器\n\n想要删除一行并且不将其存储在任何寄存器中时，可以使用`\"_dd`命令，它是和 `/dev/null` 类似的寄存器。\n\n**搜索模式寄存器 (`\"/`)**\n\n这个寄存器里保存了你上一次搜索的内容\n\n\n\n\n\n**执行寄存器中存储的命令**，命名寄存器中存放的内容可以当作宏命令来执行，使用`@`来执行\n\n**清除寄存器**\n\n从技术上来说，我们没有必要来清除任何寄存器，因为你下一个使用来存储文本的寄存器会自动覆盖该寄存器中之前的内容。然而，你可以通过记录一个空的宏命令来快速地清除任何命名寄存器。比如，如果你运行`qaq`，Vim就会在寄存器\"a\"中记录一个空的宏命令。还有一种方法就是运行命令`:call setreg('a','')`,其中'a'代表的就是寄存器\"a\"。还有一种清除寄存器的方法就是使用表达式`:let @a = ''`来将寄存器的值设为空的字符串。\n\n**获取寄存器中的内容**\n\n你可以使用`:put`命令来粘贴任何寄存器的内容。比如，如果你运行命令`:put a`,Vim就会打印出寄存器\"a\"的内容，这和`\"ap`非常像，唯一的区别在于在普通模式下命令`p`在当前光标位置之后打印寄存器的内容，而`:put`新起一行来打印寄存器的内容。\n\n\n\n## 08.命令行模式\n\n  命令行模式支持使用扩展命令(ex commands)的特性(`:`开启)\n\n  举例一些常用的扩展命令\n  - `:colorscheme` 查看vim当前使用的主题\n  - `edit` 编辑文件，后面跟上文件路径就可以打开一个新的buffer来编辑文件\n\n  ### 编辑文件扩展命令\n  ```\n :edit {relative-path-to-file} \n  ```\n执行这个命令后如果不存在文件那么就会新建一个再打开，这个命令的简写是`:e`\n### 保存文件和关闭文件命令\n- `:write`简写是`:w`，用于保存文件\n- `:quit`简写是`:q`,用于关闭文件\n- `:wall`简写是`:wa`，用于保存所有文件\n- `:qall`简写是`:qa`，用于关闭所有文件\n- `:wqall`  `:wqa`，用于保存并关闭所有文件\n- `:qall!`  `:qa!`，强制退出所有文件不保存\n\n 如果你想强制执行忽略错误，那么就在前面或后面加上`!`，比如`!q`就是强制退出\n 你也可以组合两个命令，比如 `wq`就是保存后关闭\n\n### 同时删除多行\n\n文本扩展命令的形式如下：\n```\n:[range]command[options]\n\n```\n其中，我们要执行删除操作的时候，命令的形式会变成如下：\n```\n:[range]d [register]\n```\n其中寄存器是存放我们剪切的内容的\n举个例子,执行`:10,12d a`，那么10-12行的内容就会被删除，剪切的内容存放在a寄存器，可以使用`\"ap`粘贴就还原了。\n\n具体还有如下的使用方式\n- 使用数字(e.g. **`:10,12d`** 会删除行 10, 11 , 12)\n- 使用偏移值 (e.g. **`:10,+2d`** 会删除行 10, 11 , 12)\n- 使用 **`.`**表示当前行 (e.g. **`:.,+2d`** 会删除当前行和接下来的两行)\n- 使用 **`%`**表示整个文件  (e.g. **`:%d`** 会删除整个文件)\n- 使用**`0`**表示整个文件的开始  (e.g. **`:0,+10d`** 会删除前十行)\n- 使用**`$`**表示文件的结尾  (e.g. **`:.,$d`** 会删除从当前行到文件结尾的内容)\n- 当使用visual mode选中文本后再输入 **`:`**  **`:'<,'>`** 表示你选中的范围， 执行 **`:'<,'>d`** 就可以删除当前选中的内容\n\n其他也有一些有用的命令包括 `:yank`, `:put`, `:copy` and `:move`等\n\n### 重复执行命令\n\n使用 **`@:`** 可以重复执行你上一个命令，之后你可以用`@@`再次重复执行\n\n### 替换文本\n\n语法如下\n\n```\n:[range]s/{pattern}/{substitute}/{flags}\n```\n\n* range定义了执行替换的范围\n* pattern 匹配替换内容的正则表达式\n* substitute 是我们想要替换的文本\n* flags 是用于配置替换文本的选项\n\n举个例子\n\n`:s/led/gold` 会替换当前行第一个匹配到的led为gold\n\n如果你想要替换当前行所有的匹配，那么加一个g flag执行 `:s/led/gold/g`\n\n如果你想替换整个文件的所有匹配，用`%`表示整个文件的范围，执行`:%s/led/gold/g`\n\n出了g以外，还有其他flag：\n\n- `i`,忽略大小写\n- `c`，每次替换需要确认\n\n## 09.宏命令\n\n在编辑文件的时候，你会发现有时候你在反复地做一些相同的动作。如果你仅做一次，并在需要的时候调用这些动作岂不是会更好吗。通过 Vim 的宏命令，你可以将一些动作记录到 Vim 寄存器。\n\n### 基本宏命令\n\n宏命令的基本语法如下：\n\n```\n`qa`                     开始记录动作到寄存器 a\n`q` (while recording)    停止记录\n```\n\n你可以使用小写字母 （a-z）去存储宏命令。并通过如下的命令去调用：\n\n```\n`@a`    Execute macro from register a\n`@@`    Execute the last executed macros\n```\n\n假设你有如下的文本，你打算将每一行中的所有字母都变为大写。\n\n```\nhello\nvim\nmacros\nare\nawesome\n```\n\n将你的光标移动到 “hello” 栏的行首，并执行：\n\n```\nqa0gU$jq\n```\n\n上面命令的分解如下：\n\n- `qa` 开始记录一个宏定义并存储在 a 寄存器。\n- `0` 移动到行首。\n- `gU$` 将从光标到行尾的字母变为大写。\n- `j` 移动到下一行。\n- `q` 停止记录。\n\n调用 `@a` 去执行该宏命令。就像其他的宏命令一样，你也可以为该命令加一个计数。例如，你可以通过 `3@a` 去执行 `a` 命令3次。你也可以执行 `3@@` 去执行上一次执行过的宏命令3次。\n\n### 安全保护\n\n在执行遇到错误的时候，宏命令会自动停止。假如你有如下文本：\n\n```\na. chocolate donut\nb. mochi donut\nc. powdered sugar donut\nd. plain donut\n```\n\n你想将每一行的第一个词变为大写，你可以使用如下的宏命令：\n\n```\nqa0W~jq\n```\n\n上面命令的分解如下：\n\n- `qa` 开始记录一个宏定义并存储在 a 寄存器。\n- `0` 移动到行首。\n- `W` 移动到下一个单词。\n- `~` 将光标选中的单词变为大写。\n- `j` 移动到下一行。\n- `q` 停止记录。\n\n我喜欢对宏命令进行很多次的调用，所以我通常使用 `99@a` 命令去执行该宏命令99次。当 Vim 在最后一行执行 `j` 命令的时候，会发现已经没有下一行可以继续，遇到执行的错误，因此宏命令会停止。\n\n实际上，遇到错误自动停止运行是一个很好的特性。否则，Vim 会继续执行该命令99次，尽管它已经执行到最后一行了。\n\n### 命令行执行宏\n\n在正常模式执行 `@a` 并不是宏命令调用的唯一方式。你也可以在命令行执行 `：normal @a` 。`：normal` 会将任何用户添加的参数作为命令去执行。例如添加 `@a`，和在 normal mode 执行 `@a` 的效果是一样的。\n\n`:normal` 命令也支持范围参数。你可以在选择的范围内去执行宏命令。如果你只想在第二行和第三行执行宏命令，你可以执行 `：2,3 normal @a`。我会在后续的章节中介绍更多关于在命令行中执行的命令。\n\n### 在多个文件中执行宏命令\n\n假如你有很多的 `.txt` 文件，每一个文件包含不同的内容。并且你只想将包含有 “donut” 单词的行的第一个单词变为大写。那么，该如何在很多文件中特定的行执行执行变该操作呢？\n\n第一个文件:\n\n```\n# savory.txt\na. cheddar jalapeno donut\nb. mac n cheese donut\nc. fried dumpling\n```\n\n第二个文件:\n\n```\n# sweet.txt\na. chocolate donut\nb. chocolate pancake\nc. powdered sugar donut\n```\n\n第三个文件:\n\n```\n# plain.txt\na. wheat bread\nb. plain donut\n```\n\n你可以这么做:\n\n- `:args *.txt` 查找当前目录下的所有 `.txt` 文件。\n- `:argdo g/donut/normal @a` 在所有 `:args` 中包含的文件里执行一个全局命令 `g/donut/normal @a`。\n- `:argdo update` 在所有 `:args` 中包含的文件里执行 `update` 命令会将修改后的内容保存下来。\n\n如果你对全局命令 `:g/donut/normal @a` 不是很了解的话，该命令会在包含有 `/donut/` 中的所有行执行`normal @a` 命令。我会在后面的章节中介绍全局命令。\n\n### 递归执行宏命令\n\n你可以递归地执行宏命令，通过在记录宏命令时调用相同的宏来实现。假如你有如下文本，你希望改变第一个单词的大小写：\n\n```\na. chocolate donut\nb. mochi donut\nc. powdered sugar donut\nd. plain donut\n```\n\n如下命令会递归地执行:\n\n```\nqaqqa0W~j@aq\n```\n\n上面命令的分解如下：\n\n- `qaq` 记录一个空白的宏命令到 “a” 。把宏命令记录在一个空白的命令中是必须的，因为你不会想将该命令包含有任何其他的东西。\n- `qa` 开始录入宏命令到寄存器 “a”。\n- `0` 移动到行首。\n- `W` 移动到下一个单词。\n- `~` 改变光标选中的单词的大小写。\n- `j` 移动到下一行。\n- `@a` 执行宏命令 “a”。当你记录该宏命令时，`@a` 应该是空白的，因为你刚刚调用了 `qaq`。\n- `q` 停止记录。\n\n现在，让我们调用 `@a` 来查看 Vim 如何递归的调用该宏命令。\n\n宏命令是如何知道何时停止呢？当宏执行到最后一行并尝试 `j` 命令时，发现已经没有下一行了，就会停止执行。\n\n### 增添一个已知宏\n\n如果你想在一个已经录制好的宏定义中添加更多的操作，与其重新录入它，不如选择修改它。假设你不仅希望将第一个单词变为大写，也希望在每一行末尾添加一个句点。\n\n假设当前寄存器“a”中有如下的命令：\n\n```\n0W~\n```\n\n你可以这样做:\n\n```\nqAA.<esc>q\n```\n\n分解如下:\n\n- `qA` 开始在寄存器 “A” 中记录宏命令。\n- `A.<esc>` 在行的末尾（`A`）假如一个句点，并且退出插入模式。\n- `q` 停止记录宏命令。\n\n现在，当你执行 `@a` 时，它会跳到行的第一个字符（`0`），跳到下一个单词（`W`），改变光标选中的字母的大小写（`~`），移动到最后一行并且转到插入模式（`A`），写入一个句点（`.`），退出插入模式（`<esc>`）。\n\n### 修改一个已知宏\n\n在已存在的宏定义的末尾添加新的动作是一个很好的功能，但假如你希望在一个宏命令的中间添加动作该怎么做呢？\n\n假设，在改变第一个单词的大小写和在末尾加入一个句点之间，你想要在单词 “donut” 之前加入 “deep fried”（因为唯一比甜甜圈好的东西就是炸甜甜圈）。\n\n我会重新使用上一节使用过的文本:\n\n```\na. chocolate donut\nb. mochi donut\nc. powdered sugar donut\nd. plain donut\n```\n\n首先，让我们通过 `:put a` 调用一个已经录制好的宏命令（假设你已经有了上一节中使用过的宏命令）：\n\n```\n0W~A.^[\n```\n\n`^[` 是什么意思呢？不记得了吗，你之前执行过 `0W~A.<esc>`。 `^[` 是 Vim 的内部指令，表示 `<esc>`。通过这些指定的键值组合，Vim 知道这些是内部代码的一些替代。一些常见的内部指令具有类似的替代，例如 `<esc>`，`<backspace>`，`<enter>`。还有一些其他的键值组合，但这不是本章的内容。\n\n回到宏命令，在改变大小写之后的键后面（`~`），让我们添加（`$`）来移动光标到行末，回退一个单词（`b`），进入插入模式（`i`），输入“deep fried ”（别忽略“fried ” 后面的这个空格），之后退出插入模式（`<esc>`）。\n\n完整的命令如下:\n\n```\n0W~$bideep fried <esc>A.^[\n```\n\n这里有一个问题，Vim 不能理解 `<esc>`。所以你需要将其替换为内部代码的形式。在插入模式，在按下`<esc>`后按下 `Ctrl-v`，Vim 会打印 `^[`。 `Ctrl-v` 是一个插入模式的操作符，可以逐字地插入一个非数字字符。你的宏命令应该如下:\n\n```\n0W~$bideep fried ^[A.^[\n```\n\n为了在寄存器“a”中添加修改后的指令，你可以通过在一个已知寄存器中添加一个新入口的方式来实现。在一行的行首，执行 `\"ay$`。这将会告诉 Vim 你打算使用寄存器 “a” （`\"a`） 来存储从当前位置到行末的文本（`y$`）。\n\n现在，但你执行 `@a` 时，你的宏命令会自动改变第一个单词的大小写，在“donut”前面添加“deep fried”，之后在行末添加“.”。\n\n另一个修改宏命令的方式是通过命令行解析。执行 `:let @a=\"`，之后执行 `Ctrl-r Ctrl-r a`，这会将寄存器“a”的命令逐字打印出来。最后，别忘记在闭合的引号（`\"`）。如果你希望在编辑命令行表达式时插入内部码来使用特定的字符，你可以使用 `Ctrl-v`。\n\n### 拷贝宏\n\n你可以很轻松的将一个寄存器的内容拷贝到另一个寄存器。例如，你可以使用 `:let @z = @a` 将寄存器“a” 中的命令拷贝到寄存器“z”。 `@a` 表示寄存器“a”中存储的内容，你现在执行 `@z`，将会执行和 `@a` 一样的指令。\n\n我发现对常用的宏命令创建冗余是很有用的。在我的工作流程中，我通常在前7个字母（a-g）上创建宏命令，并且我经常不加思索地把它们替换了。因此，如果我将很有用的宏命令移动到了字母表的末尾，就不用担心我在无意间把他们替换了。\n\n### 连续执行宏命令\n\nVim 可以连续和同时运行宏命令，假设你有如下的文本：\n\n```\nimport { FUNC1 } from \"library1\";\nimport { FUNC2 } from \"library2\";\nimport { FUNC3 } from \"library3\";\nimport { FUNC4 } from \"library4\";\nimport { FUNC5 } from \"library5\";\n```\n\n假如你希望把所有的 “FUNC” 字符变为小写，那么宏命令为如下：\n\n```\nqa0f{gui{jq\n```\n\n分解如下：\n\n- `qa` 开始记录宏命令到 “a” 寄存器。\n- `0`移动到第一行。\n- `f{` 查找第一个 “{” 字符。\n- `gui{` 把括号内的文本（`i{`）变为小写（`gu`）。\n- `j` 移动到下一行。\n- `q` 停止记录宏命令。\n\n现在，执行 `99@a` 在剩余的行修改。然而，假如在你的文本里有如下 import 语句会怎么样呢？\n\n```\nimport { FUNC1 } from \"library1\";\nimport { FUNC2 } from \"library2\";\nimport { FUNC3 } from \"library3\";\nimport foo from \"bar\";\nimport { FUNC4 } from \"library4\";\nimport { FUNC5 } from \"library5\";\n```\n\n执行 `99@a`，会只在前三行执行。而最后两行不会被执行，因为在执行第四行（包含“foo”）时会遇到错误而停止。然而这种情况你希望继续向下执行。你可以移动到包含（“FUNC4”）的一行，并重新调用该命令。但是假如你希望仅调用一次命令就完成所有操作呢？你可以并行地执行宏命令。\n\n如本章前面所说，可以使用 `:normal` 去执行宏命令，（例如： `:3,5 normal @a` 会在 3-5行执行 a 寄存器中的宏命令）。如果执行 `:1,$ normal @a`，会在所有除了包含有 “foo” 的行执行，而且它不会出错。\n\n尽管本质上来说，Vim 并不是在并行地执行宏命令，但表面上看，它是并行运行的。 Vim 会独立地在从第一行开始（`1,$`）每一行执行 `@a` 。由于 Vim 独立地在每一行执行命令，每一行都不会知道有一行（包含“foo”）会遇到执行错误。\n\n\n\n## 10.切换分屏(splits)和标签(tabs)\n\n### 分屏(splits)\n\n执行下面的命令可以实现分屏显示\n\n- **`:sp {relative-path-to-file}`** 水平分屏打开一个文件\n- **`:vsp {relative-path-to-file}`** 垂直分屏打开一个文件\n\n除了命令的方式，你也可以使用快捷键\n\n- **`<CTRL-W> S`** 打开一个水平分屏(上下分屏)的窗口\n- **`<CTRL-W> V`** 打开一个垂直分屏(所有分屏)的窗口\n\n在vscde的vim插件里面可以用 **`CTRL-P`*在分屏里打开新文件\n\n使用 **`CTRL-W`** + **`hjkl`**在分屏见移动\n\n### 标签(tabs)\n\n在分屏里面也可以打开标签\n\n使用命令打开标签的方式是\n\n-  **`:tabnew {file}`** 在新标签中打开文件\n-  **`:tabn`** (**`:tabnext`**) 切换到下一个标签\n-  **`:tabp`** (**`:tabprevious`**) 切换到前一个标签\n-  **`:tabo`** (**`:tabonly`**) 关闭所有其他标签\n\n\n\n\n\n\n\n\n\n## 11.vim-surround插件的使用\n\nVSCodeVim自带了这个插件，这个插件带来了一个新操作符s，surroundings值得是包裹单词句子的符号，比如引号，花括号还有html标签(quotes, parenthesis, braces, tags, etc…)等\n\n- **`ds`** 删除surroundings\n- **`cs`** 修改 surroundings\n- **`ys`** 添加 surroundings\n\n具体的语法如下\n\n```\nds{count}{motion}\ncs{count}{motion}\nys{count}{motion}\n```\n\n举个例子\n\n- **`ds'`** 删除包围的 **`'`** (`ds{char}`)\n- **`cs'\"`** 替换包围的 **`'`** 为 **`\"`** (`cs{old}{new}`)\n- **`ysaptli>`** 包围一段话用 **`<li>`** 标签 (`ys{motion}{char}`)\n\n也可以在v视觉模式下选中然后 `S{desired character}`，就可以用你喜欢的符号包围了。\n\n## 12.自定义按键映射\n\n自定义映射可以把按键调整到你更舒服的位置\n\n在vscode里面的编辑步骤如下\n\n首先找到设置\n\n1. 打开命令面板 **`CMD-SHIFT-P`** 或者 **`CTRL-SHIFT-P`**\n2. 输入preferences（或者在菜单栏也可以打开）\n3. 选择 Open User Settings Options\n4. 输入  **`vim`**\n\n可以 编辑三种模式的自定义映射：\n\n- *Normal Mode Key Bindings Non Recursive* for normal mode\n- *Visual Mode Key Bindings Non Recursive* for visual mode\n- *Insert Mode Key Bindings Non Recursive* for insert mode\n\n举个例子，自定义normal模式的映射\n\n```json\n{\n  \"vim.insertModeKeyBindingsNonRecursive\": [\n    {\n      \"before\": [\"j\", \"k\"],\n      \"after\": [\"<ESC>\"]\n    }\n  ],\n}\n```\n\n- **before**  就是你输入的命令\n- **after** 就是你映射的值，当你输入before里的值后就会执行after中映射的键\n\n在这个例子里，你可以在插入模式里把j和k当作ESC使用，不过这个设置就不是很实用，因为在插入模式里面j和k的输入需求也不少\n\n### 关于创建自定义映射的指导方针\n\n自定义映射比较灵活自由，但是不好的设置可能会给自己带来麻烦。\n\n一般来说，遵循以下3个原则会比较好：\n\n- 自定义映射用leader key打头来触发，一般是反斜杠`\\`，这样就不会和已有的键位发生冲突了\n- 如果你的工作流程中有经常使用的按键，那么映射替换vim默认的按键也是可以的。\n- 尽量使用更容易记忆的映射，比如vim的 c表示change，d表示delete\n\n### 自定义前导键(leader key)\n\n你也可以把leader key改成比反斜杠更容易输入的键。\n\n比如说你想把leader key改成空格键\n\n```json\n{\n\"vim.leader\": \"<Space>\",\n}\n```\n\n### 下面比较好的映射的例子\n\n#### 让正常模式的上下移动更快\n\n这个改动遵循了一个vim的一个理念，就是大写字母命令会比小写版本的更强。\n\n所以大写的J会比小写的移动更快。\n\n但是我们在这里覆盖了一个比较有用的vim默认按键J，这个按键的作用是合并当前行和下一行。但是这个键的使用频率其实不高\n\nK键是用作关键词搜索，不过在VSCodeVim中还没有实现这个功能\n\n```json\n{\n  \"vim.normalModeKeyBindingsNonRecursive\": [\n    {\n      \"before\": [\"J\"],\n      \"after\": [\"5\", \"j\"]\n    },\n    {\n      \"before\": [\"K\"],\n      \"after\": [\"5\", \"k\"]\n    },\n  ]\n}\n```\n\n为了保持合并行功能，我们把它加到leader key里\n\n```json\n{\n  \"vim.normalModeKeyBindingsNonRecursive\": [\n    {\n      \"before\": [\"<Leader>\", \"j\"],\n      \"after\": [\"J\"]\n    },\n  ]\n}\n```\n\n#### 在分屏间快速切换\n\n```json\n{\n  \"vim.normalModeKeyBindingsNonRecursive\": [\n    {\n      \"before\": [\"<C-h>\"],\n      \"after\": [\"<C-w>\", \"h\"]\n    },\n    {\n      \"before\": [\"<C-j>\"],\n      \"after\": [\"<C-w>\", \"j\"]\n    },\n    {\n      \"before\": [\"<C-k>\"],\n      \"after\": [\"<C-w>\", \"k\"]\n    },\n    {\n      \"before\": [\"<C-l>\"],\n      \"after\": [\"<C-w>\", \"l\"]\n    }]\n}\n```\n\n#### 处理标签更方便\n\n因为VSCodeVim中处理标签唯一的方式是命令模式输入命令，所以你可以用按键映射来代替这一点\n\ncommands键就是用来替换命令模式的扩展命令的\n\n```json\n{\n  \"vim.normalModeKeyBindingsNonRecursive\": [\n    {\n      \"before\": [\"<Leader>\", \"t\", \"t\"],\n      \"commands\": [\":tabnew\"]\n    },\n    {\n      \"before\": [\"<Leader>\", \"t\", \"n\"],\n      \"commands\": [\":tabnext\"]\n    },\n    {\n      \"before\": [\"<Leader>\", \"t\", \"p\"],\n      \"commands\": [\":tabprev\"]\n    },\n    {\n      \"before\": [\"<Leader>\", \"t\", \"o\"],\n      \"commands\": [\":tabo\"]\n    }]\n}\n```\n\n#### 清除文本高亮\n\n当你使用搜索命令的时候（`/`和`?`），匹配项会被高亮，为了清除高亮你需要扩展命令`:noh`(no higlighting)\n\n这个任务很常见，我们可以创建下面的按键映射\n\n```json\n{\n  \"vim.normalModeKeyBindingsNonRecursive\": [\n    {\n      \"before\": [\"<Leader>\", \"/\"],\n      \"commands\": [\":noh\"]\n    }]\n}\n```\n\n这里的助记法是，斜杠是被用来搜索的，所以前导键加斜杠就是和搜索最相关的撤销高亮\n\n### 使用自定义映射影响vscode的action\n\n下面的例子就是用 leader+w来触发保存文件\n\n\n\n```json\n{\n  \"vim.normalModeKeyBindingsNonRecursive\": [\n    {\n      \"before\": [\"leader\", \"w\"],\n      \"commands\": [\n          \"workbench.action.files.save\",\n      ]\n    }\n}\n```\n\n找到设置**Preferences: Open Keyboard Shortcuts**，你就可以看到vscode里面命令的全名，然后你就可以替换你想替换的命令了。\n\n\n\n下面是例子\n\n`CTRL-SHIFT-P`是打开命令面板，我们替换成前导键+p\n\n`CTRL-T`  是**Go To Symbol in Workspace**，我们替换成前导键+t\n\n```json\n{\n  \"vim.normalModeKeyBindingsNonRecursive\": [\n    {\n      \"before\": [\"<Leader>\", \"p\"],\n      \"commands\": [\n          \"workbench.action.showCommands\",\n      ]\n    },\n    {\n      \"before\": [\"<Leader>\", \"t\"],\n      \"commands\": [\n          \"workbench.action.gotoSymbol\",\n      ]\n    }\n  ]\n}\n```\n\n## 13.使用vim插件更快的移动\n\n[Vim-sneak](https://github.com/justinmk/vim-sneak) 和[vim-EasyMotion](https://github.com/easymotion/vim-easymotion) 是能够帮助你在vim里快速移动的插件\n\nVSCodeVim 内置了这两个插件，不过需要你在设置里开启才能使用。\n\n## 14.增强vscode的文件浏览器\n\n **`<CTRL-W> h`**  切换到vscode的文件浏览器\n\n- **`k`** 和 **`j`** 在文件浏览器的条目中上下移动\n- Expand directories with\n-  **`l`** (right) 用于展开文件夹\n-  **`h`** (left) 用于折叠文件夹\n- 使用 **`l`** (right)打开光标下的文件\n\n记住vscode的其他快捷键会很有用\n\n- **Go To File** with `CMD-P` in Mac (or `CTRL-P` in Windows/Linux)\n- **Go To Symbol in File** with `CMD-SHIFT-O` in Mac (or `CTRL-SHIFT-O` in Windows/Linux)\n- **Go To Symbol in Workspace** with with `CMD-T` in Mac (or `CTRL-T` in Windows/Linux)\n\n你在弹出的面板里面也可以用k和j或者tab选择，enter进入"}},"__N_SSG":true}